#This file is automatic generate by schema_generate.py
#Total built-in FunctionSchema Count is 1854
_aten::add.Scalar(Tensor _0, Scalar _1, Scalar _2) -> (Tensor _0) ;
_aten::add.Tensor(Tensor _0, Tensor _1, Scalar _2) -> (Tensor _0) ;
_c10_experimental::Add(Tensor _0, Tensor _1, Tensor _2, bool _3, int _4) -> () ;
_c10_experimental::AveragedLoss(Tensor _0, Tensor _1) -> () ;
_c10_experimental::BatchGather(Tensor _0, Tensor _1, Tensor _2) -> () ;
_c10_experimental::BatchMatmul(Tensor _0, Tensor _1, Tensor _2, int _3, int _4, int _5) -> () ;
_c10_experimental::Cast(Tensor _0, Tensor _1, int _2) -> () ;
_c10_experimental::Concat(Tensor[] _0, Tensor _1, Tensor _2, int _3, int _4) -> () ;
_c10_experimental::ConstantFill(Tensor[] _0, Tensor _1, int[] _2, int[] _3, bool _4, int _5, Scalar _6) -> () ;
_c10_experimental::EnforceFinite(Tensor _0) -> () ;
_c10_experimental::ExpandDims(Tensor _0, Tensor _1, int[] _2) -> () ;
_c10_experimental::Flatten(Tensor _0, Tensor _1, int _2) -> () ;
_c10_experimental::FullyConnected(Tensor _0, Tensor _1, Tensor _2, Tensor _3, int _4, int _5) -> () ;
_c10_experimental::GivenTensorFill(Tensor[] _0, Tensor _1, int[] _2, int[] _3, bool _4, Tensor _5) -> () ;
_c10_experimental::GivenTensorInt64Fill(Tensor[] _0, Tensor _1, int[] _2, int[] _3, bool _4, Tensor _5) -> () ;
_c10_experimental::GivenTensorIntFill(Tensor[] _0, Tensor _1, int[] _2, int[] _3, bool _4, Tensor _5) -> () ;
_c10_experimental::Mul(Tensor _0, Tensor _1, Tensor _2, bool _3, int _4) -> () ;
_c10_experimental::Relu(Tensor _0, Tensor _1) -> () ;
_c10_experimental::Sigmoid(Tensor _0, Tensor _1) -> () ;
_c10_experimental::SigmoidCrossEntropyWithLogits(Tensor _0, Tensor _1, Tensor _2, bool _3, bool _4) -> () ;
_c10_experimental::SparseLengthsSum(Tensor _0, Tensor _1, Tensor _2, Tensor _3) -> () ;
_c10_experimental::StopGradient(Tensor _0, Tensor _1) -> () ;
_c10_experimental::UniformFill(Tensor[] _0, Tensor _1, int[] _2, int[] _3, bool _4, float _5, float _6) -> () ;
_caffe2::BBoxTransform(Tensor rois, Tensor deltas, Tensor im_info, float[] weights, bool apply_scale, bool rotated, bool angle_bound_on, int angle_bound_lo, int angle_bound_hi, float clip_angle_thresh, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0, Tensor output_1) ;
_caffe2::BoxWithNMSLimit(Tensor scores, Tensor boxes, Tensor batch_splits, float score_thresh, float nms, int detections_per_im, bool soft_nms_enabled, str soft_nms_method, float soft_nms_sigma, float soft_nms_min_score_thres, bool rotated, bool cls_agnostic_bbox_reg, bool input_boxes_include_bg_cls, bool output_classes_include_bg_cls, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor scores, Tensor boxes, Tensor classes, Tensor batch_splits, Tensor keeps, Tensor keeps_size) ;
_caffe2::CollectAndDistributeFpnRpnProposals(Tensor[] input_list, int roi_canonical_scale, int roi_canonical_level, int roi_max_level, int roi_min_level, int rpn_max_level, int rpn_min_level, int rpn_post_nms_topN, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor rois, Tensor rois_fpn2, Tensor rois_fpn3, Tensor rois_fpn4, Tensor rois_fpn5, Tensor rois_idx_restore_int32) ;
_caffe2::CollectRpnProposals(Tensor[] input_list, int rpn_max_level, int rpn_min_level, int rpn_post_nms_topN, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor rois) ;
_caffe2::DistributeFpnProposals(Tensor rois, int roi_canonical_scale, int roi_canonical_level, int roi_max_level, int roi_min_level, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor rois_fpn2, Tensor rois_fpn3, Tensor rois_fpn4, Tensor rois_fpn5, Tensor rois_idx_restore_int32) ;
_caffe2::Fused8BitRowwiseQuantizedToFloat(Tensor scale_bias_quantized_input, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor) ;
_caffe2::Gelu(Tensor input, bool fast_gelu=False, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output) ;
_caffe2::GenerateProposals(Tensor scores, Tensor bbox_deltas, Tensor im_info, Tensor anchors, float spatial_scale, int pre_nms_topN, int post_nms_topN, float nms_thresh, float min_size, bool angle_bound_on, int angle_bound_lo, int angle_bound_hi, float clip_angle_thresh, bool legacy_plus_one, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0, Tensor output_1) ;
_caffe2::HeatmapMaxKeypoint(Tensor heatmaps, Tensor bboxes_in, bool should_output_softmax=True, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor keypoints) ;
_caffe2::InferenceLSTM(Tensor[] input_list, int num_layers, bool has_biases, bool batch_first, bool bidirectional, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output, Tensor hidden, Tensor cell) ;
_caffe2::LayerNorm(Tensor X, Tensor? gamma, Tensor? beta, int axis=1, float epsilon=1.0000000000000001e-05, bool elementwise_affine=False, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor Y, Tensor mean, Tensor std) ;
_caffe2::LengthsMax(Tensor data, Tensor lengths, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor) ;
_caffe2::LengthsMean(Tensor data, Tensor lengths, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor) ;
_caffe2::LengthsSum(Tensor data, Tensor lengths, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor) ;
_caffe2::PiecewiseLinearTransform(Tensor predictions, float[] bounds, float[] slopes, float[] intercepts, bool binary, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor output_0) ;
_caffe2::ResizeNearest(Tensor X, str order, float width_scale, float height_scale, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor Y) ;
_caffe2::RoIAlign(Tensor features, Tensor rois, str order, float spatial_scale, int pooled_h, int pooled_w, int sampling_ratio, bool aligned, Tensor[]? _caffe2_preallocated_outputs=None) -> (Tensor) ;
_test::cat(Tensor[] inputs) -> (Tensor) ;
_test::get_first(str[][] _0) -> (str _0) ;
_test::leaky_relu(Tensor self, float v=0.01) -> (Tensor) ;
aten::Bool(Tensor a) -> (bool) ;
aten::Bool(float a) -> (bool) ;
aten::Bool(int a) -> (bool) ;
aten::Float(Scalar a) -> (float) ;
aten::Float(Tensor a) -> (float) ;
aten::Float(bool a) -> (float) ;
aten::Float(int a) -> (float) ;
aten::Float(str a) -> (float) ;
aten::Int(Scalar a) -> (int) ;
aten::Int(Tensor a) -> (int) ;
aten::Int(bool a) -> (int) ;
aten::Int(float a) -> (int) ;
aten::Size(int[] sizes) -> (int[]) ;
aten::__and__(bool a, bool b) -> (bool) ;
aten::__and__(int a, int b) -> (int) ;
aten::__and__.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::__and__.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::__contains__(Dict(Tensor, t) dict, Tensor key) -> (bool) ;
aten::__contains__(Dict(float, t) dict, float key) -> (bool) ;
aten::__contains__(Dict(int, t) dict, int key) -> (bool) ;
aten::__contains__(Dict(str, t) dict, str key) -> (bool) ;
aten::__contains__(float[] l, float item) -> (bool) ;
aten::__contains__(int[] l, int item) -> (bool) ;
aten::__contains__(str[] l, str item) -> (bool) ;
aten::__derive_index(int index, int start, int step) -> (int) ;
aten::__getitem__(Dict(Tensor, t) self, Tensor key) -> (t(*)) ;
aten::__getitem__(Dict(float, t) self, float key) -> (t(*)) ;
aten::__getitem__(Dict(int, t) self, int key) -> (t(*)) ;
aten::__getitem__(Dict(str, t) self, str key) -> (t(*)) ;
aten::__getitem__(Tensor[](a) list, int idx) -> (Tensor(*)) ;
aten::__getitem__(bool[](a) list, int idx) -> (bool) ;
aten::__getitem__(float[](a) list, int idx) -> (float) ;
aten::__getitem__(int[](a) list, int idx) -> (int) ;
aten::__getitem__(str s, int index) -> (str) ;
aten::__getitem__(t[](a) list, int idx) -> (t(*)) ;
aten::__iand__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::__iand__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::__ilshift__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::__ilshift__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::__interpolate(Tensor input, int? size=None, float? scale_factor=None, str mode='\156\145\141\162\145\163\164', bool? align_corners=None) -> (Tensor) ;
aten::__interpolate(Tensor input, int? size=None, float[]? scale_factor=None, str mode='\156\145\141\162\145\163\164', bool? align_corners=None) -> (Tensor) ;
aten::__interpolate(Tensor input, int[]? size=None, float? scale_factor=None, str mode='\156\145\141\162\145\163\164', bool? align_corners=None) -> (Tensor) ;
aten::__interpolate(Tensor input, int[]? size=None, float[]? scale_factor=None, str mode='\156\145\141\162\145\163\164', bool? align_corners=None) -> (Tensor) ;
aten::__ior__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::__ior__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::__irshift__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::__irshift__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::__is__(t1 self, t2 obj) -> (bool) ;
aten::__isnot__(t1 self, t2 obj) -> (bool) ;
aten::__ixor__.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::__ixor__.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::__lshift__.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::__lshift__.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::__not__(bool self) -> (bool) ;
aten::__or__(bool a, bool b) -> (bool) ;
aten::__or__(int a, int b) -> (int) ;
aten::__or__.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::__or__.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::__range_length(int lo, int hi, int step) -> (int) ;
aten::__round_to_zero_floordiv(int a, int b) -> (int) ;
aten::__rshift__.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::__rshift__.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::__upsample(Tensor input, int? size=None, int? scale_factor=None, str mode='\156\145\141\162\145\163\164', bool? align_corners=None) -> (Tensor) ;
aten::__upsample(Tensor input, int[]? size=None, int? scale_factor=None, str mode='\156\145\141\162\145\163\164', bool? align_corners=None) -> (Tensor) ;
aten::__upsample_bilinear(Tensor input, int? size=None, int? scale_factor=None) -> (Tensor) ;
aten::__upsample_bilinear(Tensor input, int? size=None, int[]? scale_factor=None) -> (Tensor) ;
aten::__upsample_bilinear(Tensor input, int[]? size=None, int? scale_factor=None) -> (Tensor) ;
aten::__upsample_bilinear(Tensor input, int[]? size=None, int[]? scale_factor=None) -> (Tensor) ;
aten::__upsample_nearest(Tensor input, int? size=None, int? scale_factor=None) -> (Tensor) ;
aten::__upsample_nearest(Tensor input, int[]? size=None, int? scale_factor=None) -> (Tensor) ;
aten::__xor__(bool a, bool b) -> (bool) ;
aten::__xor__(int a, int b) -> (int) ;
aten::__xor__.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::__xor__.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor) ;
aten::_adaptive_avg_pool2d_backward(Tensor grad_output, Tensor self) -> (Tensor) ;
aten::_addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::_addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::_addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!)) ;
aten::_assert_int_or_pair(int[] vals, str name, str message) -> (Tensor) ;
aten::_baddbmm_mkl_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!)) ;
aten::_batch_norm_impl_index(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor, Tensor, Tensor, int) ;
aten::_batch_norm_impl_index_backward(int impl_index, Tensor input, Tensor grad_output, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var_transform, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::_cast_Byte(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cast_Char(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cast_Double(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cast_Float(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cast_Half(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cast_Int(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cast_Long(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cast_Short(Tensor self, bool non_blocking=False) -> (Tensor) ;
aten::_cat(Tensor[] tensors, int dim=0) -> (Tensor) ;
aten::_cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::_cdist_backward(Tensor grad, Tensor x1, Tensor x2, float p, Tensor cdist) -> (Tensor) ;
aten::_cholesky_helper(Tensor self, bool upper) -> (Tensor) ;
aten::_cholesky_solve_helper(Tensor self, Tensor A, bool upper) -> (Tensor) ;
aten::_coalesced_(Tensor(a!) self, bool coalesced) -> (Tensor(a!)) ;
aten::_convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled) -> (Tensor) ;
aten::_convolution_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor weight, Tensor self, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool benchmark, bool deterministic, bool cudnn_enabled, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::_convolution_nogroup(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding) -> (Tensor) ;
aten::_copy_from(Tensor self, Tensor dst, bool non_blocking=False) -> (Tensor) ;
aten::_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, bool zero_infinity=False) -> (Tensor, Tensor) ;
aten::_ctc_loss_backward(Tensor grad, Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, Tensor neg_log_likelihood, Tensor log_alpha, int blank, bool zero_infinity=False) -> (Tensor) ;
aten::_cudnn_ctc_loss(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank, bool deterministic, bool zero_infinity) -> (Tensor, Tensor) ;
aten::_cudnn_init_dropout_state(float dropout, bool train, int dropout_seed, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::_cudnn_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor? weight_buf, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor) ;
aten::_cudnn_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[]) ;
aten::_cudnn_rnn_flatten_weight(Tensor[] weight_arr, int weight_stride0, int input_size, int mode, int hidden_size, int num_layers, bool batch_first, bool bidirectional) -> (Tensor) ;
aten::_cufft_get_plan_cache_max_size(int device_index) -> (int) ;
aten::_cufft_get_plan_cache_size(int device_index) -> (int) ;
aten::_cumprod(Tensor self, int dim) -> (Tensor) ;
aten::_cumprod.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::_cumsum(Tensor self, int dim) -> (Tensor) ;
aten::_cumsum.out(Tensor self, int dim, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::_debug_has_internal_overlap(Tensor self) -> (int) ;
aten::_dimI(Tensor self) -> (int) ;
aten::_dimV(Tensor self) -> (int) ;
aten::_dim_arange(Tensor like, int dim) -> (Tensor) ;
aten::_dirichlet_grad(Tensor x, Tensor alpha, Tensor total) -> (Tensor) ;
aten::_embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor) ;
aten::_embedding_bag_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, bool sparse, Tensor? per_sample_weights) -> (Tensor) ;
aten::_embedding_bag_dense_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, Tensor maximum_indices, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> (Tensor) ;
aten::_embedding_bag_per_sample_weights_backward(Tensor grad, Tensor weight, Tensor indices, Tensor offsets, Tensor offset2bag, int mode) -> (Tensor) ;
aten::_embedding_bag_sparse_backward(Tensor grad, Tensor indices, Tensor offsets, Tensor offset2bag, Tensor bag_size, int num_weights, bool scale_grad_by_freq, int mode, Tensor? per_sample_weights) -> (Tensor) ;
aten::_empty_affine_quantized(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, float scale=1., int zero_point=0, int? memory_format=0) -> (Tensor) ;
aten::_empty_per_channel_affine_quantized(int[] size, *, Tensor scales, Tensor zero_points, int axis, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=0) -> (Tensor) ;
aten::_fft_with_size(Tensor self, int signal_ndim, bool complex_input, bool complex_output, bool inverse, int[] checked_signal_sizes, bool normalized, bool onesided, int[] output_sizes) -> (Tensor) ;
aten::_fused_dropout(Tensor self, float p, Generator? generator=None) -> (Tensor, Tensor) ;
aten::_gather_sparse_backward(Tensor self, int dim, Tensor index, Tensor grad) -> (Tensor) ;
aten::_get_tracing_state() -> (bool) ;
aten::_grad_sum_to_size(Tensor(a) self, int[]? size) -> (Tensor(a)) ;
aten::_has_compatible_shallow_copy_type(Tensor self, Tensor from) -> (bool) ;
aten::_index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> (Tensor(a!)) ;
aten::_index_put_impl_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> (Tensor(a!)) ;
aten::_index_put_impl_(Tensor(a!) self, Tensor[] indices, Tensor values, bool accumulate=False, bool unsafe=False) -> (Tensor(a!)) ;
aten::_indices(Tensor(a) self) -> (Tensor(a)) ;
aten::_infer_size(int[] a, int[] b) -> (int[]) ;
aten::_infer_size(int[] a, int[] b) -> (int[]) ;
aten::_inverse_helper(Tensor self) -> (Tensor) ;
aten::_list_to_tensor(int[] self) -> (Tensor) ;
aten::_local_scalar_dense(Tensor self) -> (Scalar) ;
aten::_log_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor) ;
aten::_log_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor) ;
aten::_lu_solve_helper(Tensor self, Tensor LU_data, Tensor LU_pivots) -> (Tensor) ;
aten::_lu_with_info(Tensor self, bool pivot=True, bool check_errors=True) -> (Tensor, Tensor, Tensor) ;
aten::_make_per_channel_quantized_tensor(Tensor self, Tensor scale, Tensor zero_point, int axis) -> (Tensor) ;
aten::_make_per_tensor_quantized_tensor(Tensor self, float scale, int zero_point) -> (Tensor) ;
aten::_masked_scale(Tensor self, Tensor mask, float scale) -> (Tensor) ;
aten::_max(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor) ;
aten::_min(Tensor self, int dim, bool keepdim=False) -> (Tensor, Tensor) ;
aten::_mkldnn_reshape(Tensor self, int[] shape) -> (Tensor) ;
aten::_mkldnn_transpose(Tensor self, int dim0, int dim1) -> (Tensor) ;
aten::_mkldnn_transpose_(Tensor(a!) self, int dim0, int dim1) -> (Tensor(a!)) ;
aten::_mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor, Tensor) ;
aten::_multinomial_alias_draw(Tensor J, Tensor q, int num_samples, *, Generator? generator=None) -> (Tensor) ;
aten::_multinomial_alias_setup(Tensor probs) -> (Tensor, Tensor) ;
aten::_ncf_unsqueeze(Tensor self, int ndim) -> (Tensor) ;
aten::_ncf_view(Tensor self, int[] input_shape, int normalized_ndim) -> (Tensor) ;
aten::_nnpack_available() -> (bool) ;
aten::_nnpack_spatial_convolution(Tensor input, Tensor weight, Tensor? bias, int[2] padding) -> (Tensor) ;
aten::_nnpack_spatial_convolution_backward(Tensor input, Tensor grad_output, Tensor weight, int[2] padding, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::_nnpack_spatial_convolution_backward_input(Tensor input, Tensor grad_output, Tensor weight, int[2] padding) -> (Tensor) ;
aten::_nnpack_spatial_convolution_backward_weight(Tensor input, int[] weightsize, Tensor grad_output, int[2] padding) -> (Tensor) ;
aten::_nnz(Tensor self) -> (int) ;
aten::_no_grad_embedding_renorm_(Tensor weight, Tensor input, float max_norm, float norm_type) -> (Tensor) ;
aten::_no_grad_embedding_renorm_(Tensor weight, Tensor input, float max_norm, float norm_type) -> (Tensor) ;
aten::_no_grad_fill_(Tensor(a!) tensor, float val) -> (Tensor(a!)) ;
aten::_no_grad_normal_(Tensor(a!) tensor, float mean, float std) -> (Tensor(a!)) ;
aten::_no_grad_uniform_(Tensor(a!) tensor, float a, float b) -> (Tensor(a!)) ;
aten::_no_grad_zero_(Tensor(a!) tensor) -> (Tensor(a!)) ;
aten::_pack_padded_sequence(Tensor input, Tensor lengths, bool batch_first) -> (Tensor, Tensor) ;
aten::_pack_padded_sequence_backward(Tensor grad, int[] input_size, Tensor batch_sizes, bool batch_first) -> (Tensor) ;
aten::_pack_sequence(Tensor output, Tensor batch_sizes, Tensor? sorted_indices, Tensor? unsorted_indices) -> (Tensor, Tensor, Tensor?, Tensor?) ;
aten::_pad_packed_sequence(Tensor data, Tensor batch_sizes, bool batch_first, Scalar padding_value, int total_length) -> (Tensor, Tensor) ;
aten::_pdist_backward(Tensor grad, Tensor self, float p, Tensor pdist) -> (Tensor) ;
aten::_pdist_forward(Tensor self, float p=2.) -> (Tensor) ;
aten::_qr_helper(Tensor self, bool some) -> (Tensor, Tensor) ;
aten::_reshape_from_tensor(Tensor self, Tensor shape) -> (Tensor) ;
aten::_s_where(Tensor condition, Tensor self, Tensor other) -> (Tensor) ;
aten::_sample_dirichlet(Tensor self, Generator? generator=None) -> (Tensor) ;
aten::_set_item(Dict(Tensor, t)(a!) l, Tensor idx, t(b -> *) v) -> () ;
aten::_set_item(Dict(float, t)(a!) l, float idx, t(b -> *) v) -> () ;
aten::_set_item(Dict(int, t)(a!) l, int idx, t(b -> *) v) -> () ;
aten::_set_item(Dict(str, t)(a!) l, str idx, t(b -> *) v) -> () ;
aten::_set_item(Tensor[](a!) l, int idx, Tensor(b -> *) el) -> (Tensor[](a!)) ;
aten::_set_item(bool[](a!) l, int idx, bool el) -> (bool[](a!)) ;
aten::_set_item(float[](a!) l, int idx, float el) -> (float[](a!)) ;
aten::_set_item(int[](a!) l, int idx, int el) -> (int[](a!)) ;
aten::_set_item(t[](a!) l, int idx, t(b -> *) el) -> (t[](a!)) ;
aten::_shape_as_tensor(Tensor self) -> (Tensor) ;
aten::_size_if_not_equal(int[] self_size, int[] other_size) -> (int[]?) ;
aten::_sobol_engine_draw(Tensor quasi, int n, Tensor sobolstate, int dimension, int num_generated, int? dtype) -> (Tensor, Tensor) ;
aten::_sobol_engine_ff_(Tensor(a!) self, int n, Tensor sobolstate, int dimension, int num_generated) -> (Tensor(a!)) ;
aten::_sobol_engine_initialize_state_(Tensor(a!) self, int dimension) -> (Tensor(a!)) ;
aten::_sobol_engine_scramble_(Tensor(a!) self, Tensor ltm, int dimension) -> (Tensor(a!)) ;
aten::_softmax(Tensor self, int dim, bool half_to_float) -> (Tensor) ;
aten::_softmax_backward_data(Tensor grad_output, Tensor output, int dim, Tensor self) -> (Tensor) ;
aten::_solve_helper(Tensor self, Tensor A) -> (Tensor, Tensor) ;
aten::_sparse_addmm(Tensor self, Tensor sparse, Tensor dense, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::_sparse_coo_tensor_unsafe(Tensor indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::_sparse_coo_tensor_with_dims(int sparse_dim, int dense_dim, int[] size, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::_sparse_coo_tensor_with_dims_and_tensors(int sparse_dim, int dense_dim, int[] size, Tensor indices, Tensor values, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::_sparse_mm(Tensor sparse, Tensor dense) -> (Tensor) ;
aten::_sparse_sum(Tensor self) -> (Tensor) ;
aten::_sparse_sum.dim(Tensor self, int[1] dim) -> (Tensor) ;
aten::_sparse_sum.dim_dtype(Tensor self, int[1] dim, *, int dtype) -> (Tensor) ;
aten::_sparse_sum.dtype(Tensor self, *, int dtype) -> (Tensor) ;
aten::_sparse_sum_backward(Tensor grad, Tensor self, int[] dim) -> (Tensor) ;
aten::_standard_gamma(Tensor self, Generator? generator=None) -> (Tensor) ;
aten::_standard_gamma_grad(Tensor self, Tensor output) -> (Tensor) ;
aten::_std(Tensor self, bool unbiased=True) -> (Tensor) ;
aten::_svd_helper(Tensor self, bool some, bool compute_uv) -> (Tensor, Tensor, Tensor) ;
aten::_symeig_helper(Tensor self, bool eigenvectors, bool upper) -> (Tensor, Tensor) ;
aten::_tensor_to_list(Tensor self) -> (int[]) ;
aten::_thnn_differentiable_gru_cell_backward(Tensor grad_hy, Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias, Tensor? hidden_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor) ;
aten::_thnn_differentiable_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor input_gates, Tensor hidden_gates, Tensor? input_bias, Tensor? hidden_bias, Tensor cx, Tensor cy) -> (Tensor, Tensor, Tensor, Tensor, Tensor) ;
aten::_thnn_fused_gru_cell(Tensor input_gates, Tensor hidden_gates, Tensor hx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor) ;
aten::_thnn_fused_gru_cell_backward(Tensor grad_hy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor) ;
aten::_thnn_fused_lstm_cell(Tensor input_gates, Tensor hidden_gates, Tensor cx, Tensor? input_bias=None, Tensor? hidden_bias=None) -> (Tensor, Tensor, Tensor) ;
aten::_thnn_fused_lstm_cell_backward(Tensor? grad_hy, Tensor? grad_cy, Tensor cx, Tensor cy, Tensor workspace, bool has_bias) -> (Tensor, Tensor, Tensor, Tensor, Tensor) ;
aten::_triangular_solve_helper(Tensor self, Tensor A, bool upper, bool transpose, bool unitriangular) -> (Tensor, Tensor) ;
aten::_trilinear(Tensor i1, Tensor i2, Tensor i3, int[] expand1, int[] expand2, int[] expand3, int[] sumdim, int unroll_dim=1) -> (Tensor) ;
aten::_unique(Tensor self, bool sorted=True, bool return_inverse=False) -> (Tensor, Tensor) ;
aten::_unique2(Tensor self, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor) ;
aten::_unsafe_view(Tensor self, int[] size) -> (Tensor) ;
aten::_unwrap_optional(t(a)? optional) -> (t(a)) ;
aten::_values(Tensor(a) self) -> (Tensor(a)) ;
aten::_var(Tensor self, bool unbiased=True) -> (Tensor) ;
aten::_version(Tensor self) -> (int) ;
aten::_weight_norm(Tensor v, Tensor g, int dim=0) -> (Tensor) ;
aten::_weight_norm_cuda_interface(Tensor v, Tensor g, int dim=0) -> (Tensor, Tensor) ;
aten::_weight_norm_cuda_interface_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor) ;
aten::_weight_norm_differentiable_backward(Tensor grad_w, Tensor saved_v, Tensor saved_g, Tensor saved_norms, int dim) -> (Tensor, Tensor) ;
aten::abs(Tensor self) -> (Tensor) ;
aten::abs.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::abs_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::acos(Scalar a) -> (Scalar) ;
aten::acos(Tensor self) -> (Tensor) ;
aten::acos(float a) -> (float) ;
aten::acos(int a) -> (float) ;
aten::acos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::acos_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::acosh(Scalar a) -> (Scalar) ;
aten::acosh(float a) -> (float) ;
aten::acosh(int a) -> (float) ;
aten::adaptive_avg_pool1d(Tensor self, int[1] output_size) -> (Tensor) ;
aten::adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor) ;
aten::adaptive_avg_pool2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::adaptive_avg_pool3d(Tensor self, int[3] output_size) -> (Tensor) ;
aten::adaptive_avg_pool3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::adaptive_avg_pool3d_backward(Tensor grad_output, Tensor self) -> (Tensor) ;
aten::adaptive_avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::adaptive_max_pool1d(Tensor self, int[1] output_size) -> (Tensor, Tensor) ;
aten::adaptive_max_pool2d(Tensor self, int[2] output_size) -> (Tensor, Tensor) ;
aten::adaptive_max_pool2d_backward(Tensor grad_output, Tensor self, Tensor indices) -> (Tensor) ;
aten::adaptive_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::adaptive_max_pool3d(Tensor self, int[3] output_size) -> (Tensor, Tensor) ;
aten::adaptive_max_pool3d_backward(Tensor grad_output, Tensor self, Tensor indices) -> (Tensor) ;
aten::adaptive_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::add(Scalar a, Scalar b) -> (Scalar) ;
aten::add(Tensor[] a, Tensor[] b) -> (Tensor[]) ;
aten::add(bool[] a, bool[] b) -> (bool[]) ;
aten::add(float a, float b) -> (float) ;
aten::add(float a, int b) -> (float) ;
aten::add(float[] a, float[] b) -> (float[]) ;
aten::add(int a, float b) -> (float) ;
aten::add(int a, int b) -> (int) ;
aten::add(int[] a, int[] b) -> (int[]) ;
aten::add(str a, str b) -> (str) ;
aten::add(t[] a, t[] b) -> (t[]) ;
aten::add.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor) ;
aten::add.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor) ;
aten::add.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::add_(Tensor[](a!) self, Tensor[] b) -> (Tensor[]) ;
aten::add_(bool[](a!) self, bool[] b) -> (bool[]) ;
aten::add_(float[](a!) self, float[] b) -> (float[]) ;
aten::add_(int[](a!) self, int[] b) -> (int[]) ;
aten::add_(t[](a!) self, t[] b) -> (t[]) ;
aten::add_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!)) ;
aten::add_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!)) ;
aten::addbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::addbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::addbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!)) ;
aten::addcdiv(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor) ;
aten::addcdiv.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::addcdiv_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor(a!)) ;
aten::addcmul(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor) ;
aten::addcmul.out(Tensor self, Tensor tensor1, Tensor tensor2, *, Scalar value=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::addcmul_(Tensor(a!) self, Tensor tensor1, Tensor tensor2, *, Scalar value=1) -> (Tensor(a!)) ;
aten::addmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::addmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::addmm_(Tensor(a!) self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!)) ;
aten::addmv(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::addmv.out(Tensor self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::addmv_(Tensor(a!) self, Tensor mat, Tensor vec, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!)) ;
aten::addr(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::addr.out(Tensor self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::addr_(Tensor(a!) self, Tensor vec1, Tensor vec2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!)) ;
aten::affine_grid_generator(Tensor theta, int[] size, bool align_corners) -> (Tensor) ;
aten::affine_grid_generator_backward(Tensor grad, int[] size, bool align_corners) -> (Tensor) ;
aten::alias(Tensor(a) self) -> (Tensor(a)) ;
aten::align_as(Tensor self, Tensor other) -> (Tensor) ;
aten::align_tensors(Tensor[] tensors) -> (Tensor[]) ;
aten::all(Tensor self) -> (Tensor) ;
aten::all.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor) ;
aten::all.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::allclose(Tensor self, Tensor other, float rtol=1.0000000000000001e-05, float atol=1e-08, bool equal_nan=False) -> (bool) ;
aten::alpha_dropout(Tensor input, float p, bool train) -> (Tensor) ;
aten::alpha_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!)) ;
aten::any(Tensor self) -> (Tensor) ;
aten::any.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor) ;
aten::any.out(Tensor self, int dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::append(Tensor[](a!) self, Tensor(c -> *) el) -> (Tensor[](a!)) ;
aten::append(bool[](a!) self, bool el) -> (bool[](a!)) ;
aten::append(float[](a!) self, float el) -> (float[](a!)) ;
aten::append(int[](a!) self, int el) -> (int[](a!)) ;
aten::append(str[](a!) self, str? el) -> (str[](a!)) ;
aten::append(t[](a!) self, t(c -> *) el) -> (t[](a!)) ;
aten::arange(Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::arange.out(Scalar end, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::arange.start(Scalar start, Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::arange.start_out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::arange.start_step(Scalar start, Scalar end, Scalar step, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::argmax(Tensor self, int? dim=None, bool keepdim=False) -> (Tensor) ;
aten::argmin(Tensor self, int? dim=None, bool keepdim=False) -> (Tensor) ;
aten::argsort(Tensor self, int dim=-1, bool descending=False) -> (Tensor) ;
aten::as_strided(Tensor(a) self, int[] size, int[] stride, int? storage_offset=None) -> (Tensor(a)) ;
aten::as_strided_(Tensor(a!) self, int[] size, int[] stride, int? storage_offset=None) -> (Tensor(a!)) ;
aten::as_tensor(Tensor(a) data, *, int? dtype=None, Device? device=None) -> (Tensor(a|b)) ;
aten::as_tensor(bool t, *, int? dtype=None, Device? device=None) -> (Tensor) ;
aten::as_tensor(float t, *, int? dtype=None, Device? device=None) -> (Tensor) ;
aten::as_tensor(int t, *, int? dtype=None, Device? device=None) -> (Tensor) ;
aten::as_tensor(t[] data, *, int? dtype=None, Device? device=None) -> (Tensor) ;
aten::asin(Scalar a) -> (Scalar) ;
aten::asin(Tensor self) -> (Tensor) ;
aten::asin(float a) -> (float) ;
aten::asin(int a) -> (float) ;
aten::asin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::asin_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::asinh(Scalar a) -> (Scalar) ;
aten::asinh(Scalar a) -> (Scalar) ;
aten::asinh(float a) -> (float) ;
aten::asinh(float a) -> (float) ;
aten::asinh(int a) -> (float) ;
aten::asinh(int a) -> (float) ;
aten::atan(Scalar a) -> (Scalar) ;
aten::atan(Tensor self) -> (Tensor) ;
aten::atan(float a) -> (float) ;
aten::atan(int a) -> (float) ;
aten::atan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::atan2(Scalar a, Scalar b) -> (float) ;
aten::atan2(Tensor self, Tensor other) -> (Tensor) ;
aten::atan2(float a, float b) -> (float) ;
aten::atan2(float a, int b) -> (float) ;
aten::atan2(int a, float b) -> (float) ;
aten::atan2(int a, int b) -> (float) ;
aten::atan2.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::atan2_(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::atan_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::atanh(Scalar a) -> (Scalar) ;
aten::atanh(Scalar a) -> (Scalar) ;
aten::atanh(float a) -> (float) ;
aten::atanh(float a) -> (float) ;
aten::atanh(int a) -> (float) ;
aten::atanh(int a) -> (float) ;
aten::avg_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], bool ceil_mode=False, bool count_include_pad=True) -> (Tensor) ;
aten::avg_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> (Tensor) ;
aten::avg_pool2d.out(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::avg_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> (Tensor) ;
aten::avg_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::avg_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None) -> (Tensor) ;
aten::avg_pool3d.out(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], bool ceil_mode=False, bool count_include_pad=True, int? divisor_override=None, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::avg_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override) -> (Tensor) ;
aten::avg_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, bool ceil_mode, bool count_include_pad, int? divisor_override, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::backward(Tensor(a!) self, Tensor? gradient=None, bool? retain_graph=None, bool create_graph=False) -> () ;
aten::backward(Tensor[](a!) tensors, Tensor?[]? grad_tensors=None, bool? retain_graph=None, bool create_graph=False) -> () ;
aten::baddbmm(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::baddbmm.out(Tensor self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::baddbmm_(Tensor(a!) self, Tensor batch1, Tensor batch2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor(a!)) ;
aten::bartlett_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::bartlett_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps, bool cudnn_enabled) -> (Tensor) ;
aten::batch_norm_backward_elemt(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, Tensor mean_dy, Tensor mean_dy_xmu) -> (Tensor) ;
aten::batch_norm_backward_reduce(Tensor grad_out, Tensor input, Tensor mean, Tensor invstd, Tensor? weight, bool input_g, bool weight_g, bool bias_g) -> (Tensor, Tensor, Tensor, Tensor) ;
aten::batch_norm_elemt(Tensor input, Tensor? weight, Tensor? bias, Tensor mean, Tensor invstd, float eps) -> (Tensor) ;
aten::batch_norm_gather_stats(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int count) -> (Tensor, Tensor) ;
aten::batch_norm_gather_stats_with_counts(Tensor input, Tensor mean, Tensor invstd, Tensor? running_mean, Tensor? running_var, float momentum, float eps, int[] counts) -> (Tensor, Tensor) ;
aten::batch_norm_stats(Tensor input, float eps) -> (Tensor, Tensor) ;
aten::batch_norm_update_stats(Tensor input, Tensor? running_mean, Tensor? running_var, float momentum) -> (Tensor, Tensor) ;
aten::bernoulli(Tensor self, *, Generator? generator=None) -> (Tensor) ;
aten::bernoulli.out(Tensor self, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::bernoulli.p(Tensor self, float p, *, Generator? generator=None) -> (Tensor) ;
aten::bernoulli_.Tensor(Tensor(a!) self, Tensor p, *, Generator? generator=None) -> (Tensor(a!)) ;
aten::bernoulli_.float(Tensor(a!) self, float p=0.5, *, Generator? generator=None) -> (Tensor(a!)) ;
aten::bilinear(Tensor input1, Tensor input2, Tensor weight, Tensor? bias) -> (Tensor) ;
aten::bin(int i) -> (str) ;
aten::binary_cross_entropy(Tensor self, Tensor target, Tensor? weight=None, int reduction=1) -> (Tensor) ;
aten::binary_cross_entropy.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::binary_cross_entropy_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=1) -> (Tensor) ;
aten::binary_cross_entropy_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, int reduction=1, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::binary_cross_entropy_with_logits(Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=1) -> (Tensor) ;
aten::binary_cross_entropy_with_logits_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight=None, Tensor? pos_weight=None, int reduction=1) -> (Tensor) ;
aten::bincount(Tensor self, Tensor? weights=None, int minlength=0) -> (Tensor) ;
aten::bitwise_not(Tensor self) -> (Tensor) ;
aten::bitwise_not.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::bitwise_not_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::blackman_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::blackman_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::bmm(Tensor self, Tensor mat2) -> (Tensor) ;
aten::bmm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::broadcast_tensors(Tensor[] tensors) -> (Tensor[]) ;
aten::can_cast(int from, int to) -> (bool) ;
aten::capitalize(str self) -> (str) ;
aten::cartesian_prod(Tensor[] tensors) -> (Tensor) ;
aten::cat(Tensor[] tensors, int dim=0) -> (Tensor) ;
aten::cat.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::cauchy_(Tensor(a!) self, float median=0., float sigma=1., *, Generator? generator=None) -> (Tensor(a!)) ;
aten::cdist(Tensor x1, Tensor x2, float p=2.) -> (Tensor) ;
aten::ceil(Scalar a) -> (Scalar) ;
aten::ceil(Tensor self) -> (Tensor) ;
aten::ceil(float a) -> (int) ;
aten::ceil(int a) -> (int) ;
aten::ceil.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ceil_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::celu(Tensor self, Scalar alpha=1.) -> (Tensor) ;
aten::celu_(Tensor(a!) self, Scalar alpha=1.) -> (Tensor(a!)) ;
aten::center(str self, int width, str fillchar='\040') -> (str) ;
aten::chain_matmul(Tensor[] matrices) -> (Tensor) ;
aten::cholesky(Tensor self, bool upper=False) -> (Tensor) ;
aten::cholesky.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::cholesky_inverse(Tensor self, bool upper=False) -> (Tensor) ;
aten::cholesky_inverse.out(Tensor self, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::cholesky_solve(Tensor self, Tensor input2, bool upper=False) -> (Tensor) ;
aten::cholesky_solve.out(Tensor self, Tensor input2, bool upper=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::chr(int i) -> (str) ;
aten::chunk(Tensor(a) self, int chunks, int dim=0) -> (Tensor[]) ;
aten::clamp(Tensor self, Scalar? min=None, Scalar? max=None) -> (Tensor) ;
aten::clamp.out(Tensor self, Scalar? min=None, Scalar? max=None, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::clamp_(Tensor(a!) self, Scalar? min=None, Scalar? max=None) -> (Tensor(a!)) ;
aten::clamp_max(Tensor self, Scalar max) -> (Tensor) ;
aten::clamp_max.out(Tensor self, Scalar max, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::clamp_max_(Tensor(a!) self, Scalar max) -> (Tensor(a!)) ;
aten::clamp_min(Tensor self, Scalar min) -> (Tensor) ;
aten::clamp_min.out(Tensor self, Scalar min, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::clamp_min_(Tensor(a!) self, Scalar min) -> (Tensor(a!)) ;
aten::clear(Dict(Tensor, t)(a!) self) -> () ;
aten::clear(Dict(float, t)(a!) self) -> () ;
aten::clear(Dict(int, t)(a!) self) -> () ;
aten::clear(Dict(str, t)(a!) self) -> () ;
aten::clear(Tensor[](a!) self) -> () ;
aten::clear(bool[](a!) self) -> () ;
aten::clear(float[](a!) self) -> () ;
aten::clear(int[](a!) self) -> () ;
aten::clear(t[](a!) self) -> () ;
aten::clone(Tensor self) -> (Tensor) ;
aten::coalesce(Tensor self) -> (Tensor) ;
aten::col2im(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor) ;
aten::col2im.out(Tensor self, int[2] output_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::col2im_backward(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor) ;
aten::col2im_backward.grad_input(Tensor grad_output, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::combinations(Tensor self, int r=2, bool with_replacement=False) -> (Tensor) ;
aten::constant_pad_nd(Tensor self, int[] pad, Scalar value=0) -> (Tensor) ;
aten::contiguous(Tensor self, *, int memory_format=0) -> (Tensor) ;
aten::conv1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=[1], int[1] padding=[0], int[1] dilation=[1], int groups=1) -> (Tensor) ;
aten::conv2d(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1], int groups=1) -> (Tensor) ;
aten::conv3d(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], int groups=1) -> (Tensor) ;
aten::conv_tbc(Tensor self, Tensor weight, Tensor bias, int pad=0) -> (Tensor) ;
aten::conv_tbc_backward(Tensor self, Tensor input, Tensor weight, Tensor bias, int pad) -> (Tensor, Tensor, Tensor) ;
aten::conv_transpose1d(Tensor input, Tensor weight, Tensor? bias=None, int[1] stride=[1], int[1] padding=[0], int[1] output_padding=[0], int groups=1, int[1] dilation=[1]) -> (Tensor) ;
aten::conv_transpose2d.input(Tensor input, Tensor weight, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int groups=1, int[2] dilation=[1, 1]) -> (Tensor) ;
aten::conv_transpose3d.input(Tensor input, Tensor weight, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int groups=1, int[3] dilation=[1, 1, 1]) -> (Tensor) ;
aten::convolution(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> (Tensor) ;
aten::convolution_backward_overrideable(Tensor grad_output, Tensor input, Tensor weight, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias) ;
aten::convolution_overrideable(Tensor input, Tensor weight, Tensor? bias, int[] stride, int[] padding, int[] dilation, bool transposed, int[] output_padding, int groups) -> (Tensor) ;
aten::copy(Dict(Tensor, t)(a) self) -> (Dict(Tensor, t)) ;
aten::copy(Dict(float, t)(a) self) -> (Dict(float, t)) ;
aten::copy(Dict(int, t)(a) self) -> (Dict(int, t)) ;
aten::copy(Dict(str, t)(a) self) -> (Dict(str, t)) ;
aten::copy(Tensor[](a) self) -> (Tensor[]) ;
aten::copy(bool[](a) self) -> (bool[]) ;
aten::copy(float[](a) self) -> (float[]) ;
aten::copy(int[](a) self) -> (int[]) ;
aten::copy(t[](a) self) -> (t[]) ;
aten::copy_(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::copy_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> (Tensor(a!)) ;
aten::copy_(Tensor(a!) self, float other) -> (Tensor(a!)) ;
aten::copy_(Tensor(a!) self, int other) -> (Tensor(a!)) ;
aten::copy_sparse_to_sparse_(Tensor(a!) self, Tensor src, bool non_blocking=False) -> (Tensor(a!)) ;
aten::copysign(Scalar a, Scalar b) -> (float) ;
aten::copysign(float a, float b) -> (float) ;
aten::copysign(float a, int b) -> (float) ;
aten::copysign(int a, float b) -> (float) ;
aten::copysign(int a, int b) -> (float) ;
aten::cos(Scalar a) -> (Scalar) ;
aten::cos(Tensor self) -> (Tensor) ;
aten::cos(float a) -> (float) ;
aten::cos(int a) -> (float) ;
aten::cos.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::cos_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::cosh(Scalar a) -> (Scalar) ;
aten::cosh(Scalar a) -> (Scalar) ;
aten::cosh(Tensor self) -> (Tensor) ;
aten::cosh(float a) -> (float) ;
aten::cosh(float a) -> (float) ;
aten::cosh(int a) -> (float) ;
aten::cosh(int a) -> (float) ;
aten::cosh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::cosh_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::cosine_embedding_loss(Tensor input1, Tensor input2, Tensor target, float margin=0., int reduction=1) -> (Tensor) ;
aten::cosine_similarity(Tensor x1, Tensor x2, int dim=1, float eps=1e-08) -> (Tensor) ;
aten::count(Tensor[] self, Tensor el) -> (int) ;
aten::count(bool[] self, bool el) -> (int) ;
aten::count(float[] self, float el) -> (int) ;
aten::count(int[] self, int el) -> (int) ;
aten::count(str self, str substr, int start=0, int end=-1) -> (int) ;
aten::cpu(Tensor(a) self) -> (Tensor(a|b)) ;
aten::cross(Tensor self, Tensor other, int? dim=None) -> (Tensor) ;
aten::cross.out(Tensor self, Tensor other, int? dim=None, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ctc_loss.IntList(Tensor log_probs, Tensor targets, int[] input_lengths, int[] target_lengths, int blank=0, int reduction=1, bool zero_infinity=False) -> (Tensor) ;
aten::ctc_loss.Tensor(Tensor log_probs, Tensor targets, Tensor input_lengths, Tensor target_lengths, int blank=0, int reduction=1, bool zero_infinity=False) -> (Tensor) ;
aten::cuda(Tensor(a) self) -> (Tensor(a|b)) ;
aten::cudnn_affine_grid_generator(Tensor theta, int N, int C, int H, int W) -> (Tensor grid) ;
aten::cudnn_affine_grid_generator_backward(Tensor grad, int N, int C, int H, int W) -> (Tensor grad_theta) ;
aten::cudnn_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor) ;
aten::cudnn_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor) ;
aten::cudnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::cudnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::cudnn_convolution_backward_bias(Tensor grad_output) -> (Tensor) ;
aten::cudnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::cudnn_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::cudnn_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::cudnn_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::cudnn_convolution_transpose_backward_bias(Tensor grad_output) -> (Tensor) ;
aten::cudnn_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::cudnn_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::cudnn_grid_sampler(Tensor self, Tensor grid) -> (Tensor output) ;
aten::cudnn_grid_sampler_backward(Tensor self, Tensor grid, Tensor grad_output) -> (Tensor grad_self, Tensor grad_grid) ;
aten::cudnn_is_acceptable(Tensor self) -> (bool) ;
aten::cumprod(Tensor self, int dim, *, int? dtype=None) -> (Tensor) ;
aten::cumprod.out(Tensor self, int dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::cumsum(Tensor self, int dim, *, int? dtype=None) -> (Tensor) ;
aten::cumsum.out(Tensor self, int dim, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::data(Tensor self) -> (Tensor) ;
aten::degrees(Scalar a) -> (Scalar) ;
aten::degrees(float a) -> (float) ;
aten::degrees(int a) -> (float) ;
aten::dense_dim(Tensor self) -> (int) ;
aten::dequantize(Tensor self) -> (Tensor) ;
aten::det(Tensor self) -> (Tensor) ;
aten::detach(Tensor self) -> (Tensor) ;
aten::detach_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::device(str a) -> (Device) ;
aten::diag(Tensor self, int diagonal=0) -> (Tensor) ;
aten::diag.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::diag_embed(Tensor self, int offset=0, int dim1=-2, int dim2=-1) -> (Tensor) ;
aten::diagflat(Tensor self, int offset=0) -> (Tensor) ;
aten::diagonal(Tensor(a) self, int offset=0, int dim1=0, int dim2=1) -> (Tensor(a)) ;
aten::dict((Tensor, tVal)[] inputs) -> (Dict(Tensor, tVal)) ;
aten::dict((float, tVal)[] inputs) -> (Dict(float, tVal)) ;
aten::dict((int, tVal)[] inputs) -> (Dict(int, tVal)) ;
aten::dict((str, tVal)[] inputs) -> (Dict(str, tVal)) ;
aten::dict() -> (Dict(str, Tensor)) ;
aten::digamma(Tensor self) -> (Tensor) ;
aten::digamma.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::digamma_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::dim(Tensor self) -> (int) ;
aten::dist(Tensor self, Tensor other, Scalar p=2) -> (Tensor) ;
aten::div(Scalar a, Scalar b) -> (float) ;
aten::div(float a, float b) -> (float) ;
aten::div(int a, int b) -> (float) ;
aten::div.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::div.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::div.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::div_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::div_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::divmod(float x, float y) -> (float, float) ;
aten::divmod(float x, int y) -> (float, float) ;
aten::divmod(int x, float y) -> (float, float) ;
aten::divmod(int x, int y) -> (int, int) ;
aten::dot(Tensor self, Tensor tensor) -> (Tensor) ;
aten::dot.out(Tensor self, Tensor tensor, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::dropout(Tensor input, float p, bool train) -> (Tensor) ;
aten::dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!)) ;
aten::eig(Tensor self, bool eigenvectors=False) -> (Tensor eigenvalues, Tensor eigenvectors) ;
aten::einsum(str equation, Tensor[] tensors) -> (Tensor) ;
aten::elu(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor) ;
aten::elu.out(Tensor self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::elu_(Tensor(a!) self, Scalar alpha=1, Scalar scale=1, Scalar input_scale=1) -> (Tensor(a!)) ;
aten::elu_backward(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output) -> (Tensor) ;
aten::elu_backward.grad_input(Tensor grad_output, Scalar alpha, Scalar scale, Scalar input_scale, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::embedding(Tensor weight, Tensor indices, int padding_idx=-1, bool scale_grad_by_freq=False, bool sparse=False) -> (Tensor) ;
aten::embedding_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq, bool sparse) -> (Tensor) ;
aten::embedding_bag(Tensor weight, Tensor indices, Tensor offsets, bool scale_grad_by_freq=False, int mode=0, bool sparse=False, Tensor? per_sample_weights=None) -> (Tensor, Tensor, Tensor, Tensor) ;
aten::embedding_dense_backward(Tensor grad_output, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> (Tensor) ;
aten::embedding_renorm_(Tensor(a!) self, Tensor indices, float max_norm, float norm_type) -> (Tensor(a!)) ;
aten::embedding_sparse_backward(Tensor grad, Tensor indices, int num_weights, int padding_idx, bool scale_grad_by_freq) -> (Tensor) ;
aten::empty.memory_format(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None, int? memory_format=None) -> (Tensor) ;
aten::empty.out(int[] size, *, int? memory_format=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::empty_like(Tensor self) -> (Tensor) ;
aten::empty_like.dtype(Tensor self, *, int dtype, int layout, Device device, bool pin_memory=False, int? memory_format=0) -> (Tensor) ;
aten::empty_strided(int[] size, int[] stride, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::endswith(str self, str substr, int start=0, int end=-1) -> (bool) ;
aten::eq(Device a, Device b) -> (bool) ;
aten::eq(Scalar a, Scalar b) -> (bool) ;
aten::eq(Tensor[] a, Tensor[] b) -> (bool) ;
aten::eq(bool[] a, bool[] b) -> (bool) ;
aten::eq(float a, float b) -> (bool) ;
aten::eq(float a, int b) -> (bool) ;
aten::eq(float[] a, float[] b) -> (bool) ;
aten::eq(int a, float b) -> (bool) ;
aten::eq(int a, int b) -> (bool) ;
aten::eq(int[] a, int[] b) -> (bool) ;
aten::eq(str a, str b) -> (bool) ;
aten::eq(str a, str b) -> (bool) ;
aten::eq.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::eq.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::eq.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::eq.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::eq_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::eq_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::equal(Tensor self, Tensor other) -> (bool) ;
aten::erf(Scalar a) -> (Scalar) ;
aten::erf(Tensor self) -> (Tensor) ;
aten::erf(float a) -> (float) ;
aten::erf(int a) -> (float) ;
aten::erf.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::erf_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::erfc(Scalar a) -> (Scalar) ;
aten::erfc(Tensor self) -> (Tensor) ;
aten::erfc(float a) -> (float) ;
aten::erfc(int a) -> (float) ;
aten::erfc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::erfc_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::erfinv(Tensor self) -> (Tensor) ;
aten::erfinv.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::erfinv_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::exp(Scalar a) -> (Scalar) ;
aten::exp(Tensor self) -> (Tensor) ;
aten::exp(float a) -> (float) ;
aten::exp(int a) -> (float) ;
aten::exp.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::exp_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::expand(Tensor(a) self, int[] size, *, bool implicit=False) -> (Tensor(a)) ;
aten::expand_as(Tensor self, Tensor other) -> (Tensor) ;
aten::expandtabs(str self, int tabsize=8) -> (str) ;
aten::expm1(Scalar a) -> (Scalar) ;
aten::expm1(Tensor self) -> (Tensor) ;
aten::expm1(float a) -> (float) ;
aten::expm1(int a) -> (float) ;
aten::expm1.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::expm1_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::exponential_(Tensor(a!) self, float lambd=1., *, Generator? generator=None) -> (Tensor(a!)) ;
aten::extend(Tensor[](a!) self, Tensor[] other) -> () ;
aten::extend(bool[](a!) self, bool[] other) -> () ;
aten::extend(float[](a!) self, float[] other) -> () ;
aten::extend(int[](a!) self, int[] other) -> () ;
aten::extend(t[](a!) self, t[] other) -> () ;
aten::eye(int n, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::eye.m(int n, int m, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::eye.m_out(int n, int m, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::eye.out(int n, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::fabs(Scalar a) -> (Scalar) ;
aten::fabs(float a) -> (float) ;
aten::fabs(int a) -> (float) ;
aten::factorial(int a) -> (int) ;
aten::fake_quantize_per_channel_affine(Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor) ;
aten::fake_quantize_per_channel_affine_backward(Tensor grad, Tensor self, Tensor scale, Tensor zero_point, int axis, int quant_min, int quant_max) -> (Tensor) ;
aten::fake_quantize_per_tensor_affine(Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor) ;
aten::fake_quantize_per_tensor_affine_backward(Tensor grad, Tensor self, float scale, int zero_point, int quant_min, int quant_max) -> (Tensor) ;
aten::fbgemm_linear_fp16_weight(Tensor input, Tensor packed_weight, Tensor bias) -> (Tensor) ;
aten::fbgemm_linear_fp16_weight_fp32_activation(Tensor input, Tensor packed_weight, Tensor bias) -> (Tensor) ;
aten::fbgemm_linear_int8_weight(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> (Tensor) ;
aten::fbgemm_linear_int8_weight_fp32_activation(Tensor input, Tensor weight, Tensor packed, Tensor col_offsets, Scalar weight_scale, Scalar weight_zero_point, Tensor bias) -> (Tensor) ;
aten::fbgemm_linear_quantize_weight(Tensor input) -> (Tensor, Tensor, float, int) ;
aten::fbgemm_pack_gemm_matrix_fp16(Tensor input) -> (Tensor) ;
aten::fbgemm_pack_quantized_matrix(Tensor input) -> (Tensor) ;
aten::fbgemm_pack_quantized_matrix.KN(Tensor input, int K, int N) -> (Tensor) ;
aten::feature_alpha_dropout(Tensor input, float p, bool train) -> (Tensor) ;
aten::feature_alpha_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!)) ;
aten::feature_dropout(Tensor input, float p, bool train) -> (Tensor) ;
aten::feature_dropout_(Tensor(a!) self, float p, bool train) -> (Tensor(a!)) ;
aten::fft(Tensor self, int signal_ndim, bool normalized=False) -> (Tensor) ;
aten::fill_.Scalar(Tensor(a!) self, Scalar value) -> (Tensor(a!)) ;
aten::fill_.Tensor(Tensor(a!) self, Tensor value) -> (Tensor(a!)) ;
aten::fill_diagonal_(Tensor(a!) self, Scalar fill_value, bool wrap=False) -> (Tensor(a!)) ;
aten::find(str self, str substr, int start=0, int end=-1) -> (int) ;
aten::flatten.using_ints(Tensor self, int start_dim=0, int end_dim=-1) -> (Tensor) ;
aten::flip(Tensor self, int[] dims) -> (Tensor) ;
aten::floor(Scalar a) -> (Scalar) ;
aten::floor(Tensor self) -> (Tensor) ;
aten::floor(float a) -> (int) ;
aten::floor(int a) -> (int) ;
aten::floor.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::floor_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::floordiv(Scalar a, Scalar b) -> (Scalar) ;
aten::floordiv(float a, float b) -> (float) ;
aten::floordiv(float a, int b) -> (float) ;
aten::floordiv(int a, float b) -> (float) ;
aten::floordiv(int a, int b) -> (int) ;
aten::fmod(Scalar a, Scalar b) -> (float) ;
aten::fmod(float a, float b) -> (float) ;
aten::fmod(float a, int b) -> (float) ;
aten::fmod(int a, float b) -> (float) ;
aten::fmod(int a, int b) -> (float) ;
aten::fmod.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::fmod.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::fmod.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::fmod.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::fmod_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::fmod_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::format(str self, ...) -> (str) ;
aten::frac(Tensor self) -> (Tensor) ;
aten::frac.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::frac_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::fractional_max_pool2d(Tensor self, int[2] kernel_size, int[2] output_size, Tensor random_samples) -> (Tensor, Tensor) ;
aten::fractional_max_pool2d_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices) -> (Tensor) ;
aten::fractional_max_pool2d_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] output_size, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::fractional_max_pool3d(Tensor self, int[3] kernel_size, int[3] output_size, Tensor random_samples) -> (Tensor, Tensor) ;
aten::fractional_max_pool3d_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices) -> (Tensor) ;
aten::fractional_max_pool3d_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] output_size, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::frexp(float a) -> (float, int) ;
aten::frobenius_norm(Tensor self) -> (Tensor) ;
aten::frobenius_norm.dim(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor) ;
aten::frobenius_norm.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::from_file(str filename, bool? shared=None, int? size=0, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::full(int[] size, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::full.out(int[] size, Scalar fill_value, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::full_like(Tensor self, Scalar fill_value) -> (Tensor) ;
aten::full_like.dtype(Tensor self, Scalar fill_value, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::gamma(Scalar a) -> (Scalar) ;
aten::gamma(float a) -> (float) ;
aten::gamma(int a) -> (float) ;
aten::gather(Tensor self, int dim, Tensor index, *, bool sparse_grad=False) -> (Tensor) ;
aten::gather.out(Tensor self, int dim, Tensor index, *, bool sparse_grad=False, Tensor(a!) out) -> (Tensor(a!)) ;
aten::gcd(int a, int b) -> (int) ;
aten::ge(Scalar a, Scalar b) -> (bool) ;
aten::ge(float a, float b) -> (bool) ;
aten::ge(float a, int b) -> (bool) ;
aten::ge(int a, float b) -> (bool) ;
aten::ge(int a, int b) -> (bool) ;
aten::ge(str a, str b) -> (bool) ;
aten::ge.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::ge.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ge.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::ge.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ge_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::ge_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::gelu(Tensor self) -> (Tensor) ;
aten::gelu_backward(Tensor grad, Tensor self) -> (Tensor) ;
aten::geometric_(Tensor(a!) self, float p, *, Generator? generator=None) -> (Tensor(a!)) ;
aten::geqrf(Tensor self) -> (Tensor a, Tensor tau) ;
aten::ger(Tensor self, Tensor vec2) -> (Tensor) ;
aten::ger.out(Tensor self, Tensor vec2, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::get(Dict(Tensor, t) self, Tensor key) -> (t(*)?) ;
aten::get(Dict(Tensor, t) self, Tensor key, t default_value) -> (t(*)) ;
aten::get(Dict(float, t) self, float key) -> (t(*)?) ;
aten::get(Dict(float, t) self, float key, t default_value) -> (t(*)) ;
aten::get(Dict(int, t) self, int key) -> (t(*)?) ;
aten::get(Dict(int, t) self, int key, t default_value) -> (t(*)) ;
aten::get(Dict(str, t) self, str key) -> (t(*)?) ;
aten::get(Dict(str, t) self, str key, t default_value) -> (t(*)) ;
aten::get_device(Tensor self) -> (int) ;
aten::get_device(Tensor self) -> (int) ;
aten::get_device(Tensor self) -> (int) ;
aten::glu(Tensor self, int dim=-1) -> (Tensor) ;
aten::glu.out(Tensor self, int dim=-1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::glu_backward(Tensor grad_output, Tensor self, int dim) -> (Tensor) ;
aten::glu_backward.grad_input(Tensor grad_output, Tensor self, int dim, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::grad(Tensor[] outputs, Tensor[] inputs, Tensor?[]? grad_outputs=None, bool? keep_graph=None, bool create_graph=False, bool allow_unused=False) -> (Tensor[]) ;
aten::grid_sampler(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor) ;
aten::grid_sampler_2d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor) ;
aten::grid_sampler_2d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor) ;
aten::grid_sampler_3d(Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor) ;
aten::grid_sampler_3d_backward(Tensor grad_output, Tensor input, Tensor grid, int interpolation_mode, int padding_mode, bool align_corners) -> (Tensor, Tensor) ;
aten::group_norm(Tensor input, int num_groups, Tensor? weight=None, Tensor? bias=None, float eps=1.0000000000000001e-05, bool cudnn_enabled=True) -> (Tensor) ;
aten::gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor) ;
aten::gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor) ;
aten::gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor) ;
aten::gt(Scalar a, Scalar b) -> (bool) ;
aten::gt(float a, float b) -> (bool) ;
aten::gt(float a, int b) -> (bool) ;
aten::gt(int a, float b) -> (bool) ;
aten::gt(int a, int b) -> (bool) ;
aten::gt(str a, str b) -> (bool) ;
aten::gt.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::gt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::gt.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::gt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::gt_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::gt_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::hamming_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::hamming_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::hamming_window.periodic_alpha(int window_length, bool periodic, float alpha, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::hamming_window.periodic_alpha_beta(int window_length, bool periodic, float alpha, float beta, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::hann_window(int window_length, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::hann_window.periodic(int window_length, bool periodic, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::hardshrink(Tensor self, Scalar lambd=0.5) -> (Tensor) ;
aten::hardshrink_backward(Tensor grad_out, Tensor self, Scalar lambd) -> (Tensor) ;
aten::hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1) -> (Tensor) ;
aten::hardtanh.out(Tensor self, Scalar min_val=-1, Scalar max_val=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::hardtanh_(Tensor(a!) self, Scalar min_val=-1, Scalar max_val=1) -> (Tensor(a!)) ;
aten::hardtanh_backward(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val) -> (Tensor) ;
aten::hardtanh_backward.grad_input(Tensor grad_output, Tensor self, Scalar min_val, Scalar max_val, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::hash(float t) -> (int) ;
aten::hash(int t) -> (int) ;
aten::hash(str t) -> (int) ;
aten::hex(int i) -> (str) ;
aten::hinge_embedding_loss(Tensor self, Tensor target, float margin=1., int reduction=1) -> (Tensor) ;
aten::histc(Tensor self, int bins=100, Scalar min=0, Scalar max=0) -> (Tensor) ;
aten::histc.out(Tensor self, int bins=100, Scalar min=0, Scalar max=0, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::hspmm(Tensor mat1, Tensor mat2) -> (Tensor) ;
aten::hspmm.out(Tensor mat1, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ifft(Tensor self, int signal_ndim, bool normalized=False) -> (Tensor) ;
aten::im2col(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor) ;
aten::im2col.out(Tensor self, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::im2col_backward(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride) -> (Tensor) ;
aten::im2col_backward.grad_input(Tensor grad_output, int[2] input_size, int[2] kernel_size, int[2] dilation, int[2] padding, int[2] stride, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::index(Tensor[] self, Tensor el) -> (int) ;
aten::index(bool[] self, bool el) -> (int) ;
aten::index(float[] self, float el) -> (int) ;
aten::index(int[] self, int el) -> (int) ;
aten::index.Tensor(Tensor self, Tensor?[] indices) -> (Tensor) ;
aten::index.Tensor(Tensor self, Tensor[] indices) -> (Tensor) ;
aten::index.str(str self, str substr, int start=0, int end=-1) -> (int) ;
aten::index_add(Tensor self, int dim, Tensor index, Tensor source) -> (Tensor) ;
aten::index_add_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> (Tensor(a!)) ;
aten::index_copy(Tensor self, int dim, Tensor index, Tensor source) -> (Tensor) ;
aten::index_copy_(Tensor(a!) self, int dim, Tensor index, Tensor source) -> (Tensor(a!)) ;
aten::index_fill.Scalar(Tensor self, int dim, Tensor index, Scalar value) -> (Tensor) ;
aten::index_fill.Tensor(Tensor self, int dim, Tensor index, Tensor value) -> (Tensor) ;
aten::index_fill_.Scalar(Tensor(a!) self, int dim, Tensor index, Scalar value) -> (Tensor(a!)) ;
aten::index_fill_.Tensor(Tensor(a!) self, int dim, Tensor index, Tensor value) -> (Tensor(a!)) ;
aten::index_put(Tensor self, Tensor?[] indices, Tensor values, bool accumulate=False) -> (Tensor) ;
aten::index_put(Tensor self, Tensor[] indices, Tensor values, bool accumulate=False) -> (Tensor) ;
aten::index_put_(Tensor(a!) self, Tensor?[] indices, Tensor values, bool accumulate=False) -> (Tensor(a!)) ;
aten::index_put_(Tensor(a!) self, Tensor[] indices, Tensor values, bool accumulate=False) -> (Tensor(a!)) ;
aten::index_select(Tensor self, int dim, Tensor index) -> (Tensor) ;
aten::index_select.out(Tensor self, int dim, Tensor index, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::indices(Tensor(a) self) -> (Tensor(a)) ;
aten::insert(Tensor[](a!) self, int idx, Tensor(b -> *) el) -> () ;
aten::insert(bool[](a!) self, int idx, bool el) -> () ;
aten::insert(float[](a!) self, int idx, float el) -> () ;
aten::insert(int[](a!) self, int idx, int el) -> () ;
aten::insert(t[](a!) self, int idx, t(b -> *) el) -> () ;
aten::instance_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool use_input_stats, float momentum, float eps, bool cudnn_enabled) -> (Tensor) ;
aten::int_repr(Tensor self) -> (Tensor) ;
aten::inverse(Tensor self) -> (Tensor) ;
aten::inverse.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::irfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True, int[] signal_sizes=[]) -> (Tensor) ;
aten::is_coalesced(Tensor self) -> (bool) ;
aten::is_complex(Tensor self) -> (bool) ;
aten::is_contiguous(Tensor self) -> (bool) ;
aten::is_contiguous(Tensor self) -> (bool) ;
aten::is_contiguous(Tensor self) -> (bool) ;
aten::is_distributed(Tensor self) -> (bool) ;
aten::is_floating_point(Tensor self) -> (bool) ;
aten::is_leaf(Tensor self) -> (bool) ;
aten::is_nonzero(Tensor self) -> (bool) ;
aten::is_pinned(Tensor self) -> (bool) ;
aten::is_same_size(Tensor self, Tensor other) -> (bool) ;
aten::is_scripting() -> (bool) ;
aten::is_set_to(Tensor self, Tensor tensor) -> (bool) ;
aten::is_signed(Tensor self) -> (bool) ;
aten::isalnum(str self) -> (bool) ;
aten::isalpha(str self) -> (bool) ;
aten::isclose(Tensor self, Tensor other, float rtol=1.0000000000000001e-05, float atol=1e-08, bool equal_nan=False) -> (Tensor) ;
aten::isdecimal(str self) -> (bool) ;
aten::isdigit(str self) -> (bool) ;
aten::isfinite(float a) -> (bool) ;
aten::isidentifier(str self) -> (bool) ;
aten::isinf(float a) -> (bool) ;
aten::islower(str self) -> (bool) ;
aten::isnan(Tensor self) -> (Tensor) ;
aten::isnan(float a) -> (bool) ;
aten::isnan(float a) -> (bool) ;
aten::isnumeric(str self) -> (bool) ;
aten::isprintable(str self) -> (bool) ;
aten::isspace(str self) -> (bool) ;
aten::istitle(str self) -> (bool) ;
aten::isupper(str self) -> (bool) ;
aten::item(Tensor self) -> (Scalar) ;
aten::items(Dict(Tensor, t) self) -> ((Tensor, t)[]) ;
aten::items(Dict(float, t) self) -> ((float, t)[]) ;
aten::items(Dict(int, t) self) -> ((int, t)[]) ;
aten::items(Dict(str, t) self) -> ((str, t)[]) ;
aten::keys(Dict(Tensor, t) self) -> (Tensor[](*)) ;
aten::keys(Dict(float, t) self) -> (float[](*)) ;
aten::keys(Dict(int, t) self) -> (int[](*)) ;
aten::keys(Dict(str, t) self) -> (str[](*)) ;
aten::kl_div(Tensor self, Tensor target, int reduction=1) -> (Tensor) ;
aten::kl_div_backward(Tensor grad_output, Tensor self, Tensor target, int reduction=1) -> (Tensor) ;
aten::kthvalue(Tensor self, int k, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices) ;
aten::l1_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor) ;
aten::l1_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor) ;
aten::l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::layer_norm(Tensor input, int[] normalized_shape, Tensor? weight=None, Tensor? bias=None, float eps=1.0000000000000001e-05, bool cudnn_enable=True) -> (Tensor) ;
aten::ldexp(float x, int i) -> (float) ;
aten::le(Scalar a, Scalar b) -> (bool) ;
aten::le(float a, float b) -> (bool) ;
aten::le(float a, int b) -> (bool) ;
aten::le(int a, float b) -> (bool) ;
aten::le(int a, int b) -> (bool) ;
aten::le(str a, str b) -> (bool) ;
aten::le.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::le.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::le.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::le.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::le_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::le_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::leaky_relu(Tensor self, Scalar negative_slope=0.01) -> (Tensor) ;
aten::leaky_relu.out(Tensor self, Scalar negative_slope=0.01, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::leaky_relu_(Tensor(a!) self, Scalar negative_slope=0.01) -> (Tensor(a!)) ;
aten::leaky_relu_backward(Tensor grad_output, Tensor self, Scalar negative_slope) -> (Tensor) ;
aten::leaky_relu_backward.grad_input(Tensor grad_output, Tensor self, Scalar negative_slope, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::len(Dict(Tensor, t) self) -> (int) ;
aten::len(Dict(float, t) self) -> (int) ;
aten::len(Dict(int, t) self) -> (int) ;
aten::len(Dict(str, t) self) -> (int) ;
aten::len(Tensor t) -> (int) ;
aten::len(Tensor[] a) -> (int) ;
aten::len(bool[] a) -> (int) ;
aten::len(float[] a) -> (int) ;
aten::len(int[] a) -> (int) ;
aten::len(str s) -> (int) ;
aten::len(t[] a) -> (int) ;
aten::lerp.Scalar(Tensor self, Tensor end, Scalar weight) -> (Tensor) ;
aten::lerp.Scalar_out(Tensor self, Tensor end, Scalar weight, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::lerp.Tensor(Tensor self, Tensor end, Tensor weight) -> (Tensor) ;
aten::lerp.Tensor_out(Tensor self, Tensor end, Tensor weight, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::lerp_.Scalar(Tensor(a!) self, Tensor end, Scalar weight) -> (Tensor(a!)) ;
aten::lerp_.Tensor(Tensor(a!) self, Tensor end, Tensor weight) -> (Tensor(a!)) ;
aten::lgamma(Scalar a) -> (Scalar) ;
aten::lgamma(Tensor self) -> (Tensor) ;
aten::lgamma(float a) -> (float) ;
aten::lgamma(int a) -> (float) ;
aten::lgamma.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::lgamma_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::linear(Tensor input, Tensor weight, Tensor? bias=None) -> (Tensor) ;
aten::linspace(Scalar start, Scalar end, int steps=100, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::linspace.out(Scalar start, Scalar end, int steps=100, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::list(Tensor[] l) -> (Tensor[]) ;
aten::list(bool[] l) -> (bool[]) ;
aten::list(float[] l) -> (float[]) ;
aten::list(int[] l) -> (int[]) ;
aten::list(str t) -> (str[]) ;
aten::list(t[] l) -> (t[]) ;
aten::list_with_default(int[] list, int[] defaults) -> (int[]) ;
aten::ljust(str self, int width, str fillchar='\040') -> (str) ;
aten::log(Scalar a) -> (Scalar) ;
aten::log(Scalar a, Scalar b) -> (float) ;
aten::log(Tensor self) -> (Tensor) ;
aten::log(float a) -> (float) ;
aten::log(float a, float b) -> (float) ;
aten::log(float a, int b) -> (float) ;
aten::log(int a) -> (float) ;
aten::log(int a, float b) -> (float) ;
aten::log(int a, int b) -> (float) ;
aten::log.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::log10(Scalar a) -> (Scalar) ;
aten::log10(Tensor self) -> (Tensor) ;
aten::log10(float a) -> (float) ;
aten::log10(int a) -> (float) ;
aten::log10.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::log10_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::log1p(Scalar a) -> (Scalar) ;
aten::log1p(Tensor self) -> (Tensor) ;
aten::log1p(float a) -> (float) ;
aten::log1p(int a) -> (float) ;
aten::log1p.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::log1p_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::log2(Tensor self) -> (Tensor) ;
aten::log2.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::log2_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::log_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::log_normal_(Tensor(a!) self, float mean=1., float std=2., *, Generator? generator=None) -> (Tensor(a!)) ;
aten::log_sigmoid(Tensor self) -> (Tensor) ;
aten::log_sigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::log_sigmoid_backward(Tensor grad_output, Tensor self, Tensor buffer) -> (Tensor) ;
aten::log_sigmoid_backward.grad_input(Tensor grad_output, Tensor self, Tensor buffer, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::log_sigmoid_forward(Tensor self) -> (Tensor output, Tensor buffer) ;
aten::log_softmax(Tensor self, int dim, int? dtype=None) -> (Tensor) ;
aten::logdet(Tensor self) -> (Tensor) ;
aten::logical_not(Tensor self) -> (Tensor) ;
aten::logical_not.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::logical_not_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::logical_xor(Tensor self, Tensor other) -> (Tensor) ;
aten::logical_xor.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::logical_xor_(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::logspace(Scalar start, Scalar end, int steps=100, float base=10., *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::logspace.out(Scalar start, Scalar end, int steps=100, float base=10., *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::logsumexp(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor) ;
aten::logsumexp.out(Tensor self, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::lower(str self) -> (str) ;
aten::lstm.data(Tensor data, Tensor batch_sizes, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor, Tensor) ;
aten::lstm.input(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor, Tensor) ;
aten::lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor, Tensor) ;
aten::lstrip(str self, str chars='\040\012\011\014\013') -> (str) ;
aten::lstsq(Tensor self, Tensor A) -> (Tensor solution, Tensor QR) ;
aten::lt(Scalar a, Scalar b) -> (bool) ;
aten::lt(float a, float b) -> (bool) ;
aten::lt(float a, int b) -> (bool) ;
aten::lt(int a, float b) -> (bool) ;
aten::lt(int a, int b) -> (bool) ;
aten::lt(str a, str b) -> (bool) ;
aten::lt.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::lt.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::lt.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::lt.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::lt_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::lt_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::lu_solve(Tensor self, Tensor LU_data, Tensor LU_pivots) -> (Tensor) ;
aten::lu_solve.out(Tensor self, Tensor LU_data, Tensor LU_pivots, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::manual_seed(int seed) -> () ;
aten::margin_ranking_loss(Tensor input1, Tensor input2, Tensor target, float margin=0., int reduction=1) -> (Tensor) ;
aten::masked_fill.Scalar(Tensor self, Tensor mask, Scalar value) -> (Tensor) ;
aten::masked_fill.Tensor(Tensor self, Tensor mask, Tensor value) -> (Tensor) ;
aten::masked_fill_.Scalar(Tensor(a!) self, Tensor mask, Scalar value) -> (Tensor(a!)) ;
aten::masked_fill_.Tensor(Tensor(a!) self, Tensor mask, Tensor value) -> (Tensor(a!)) ;
aten::masked_scatter(Tensor self, Tensor mask, Tensor source) -> (Tensor) ;
aten::masked_scatter_(Tensor(a!) self, Tensor mask, Tensor source) -> (Tensor(a!)) ;
aten::masked_select(Tensor self, Tensor mask) -> (Tensor) ;
aten::masked_select.out(Tensor self, Tensor mask, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::mathremainder(Scalar a, Scalar b) -> (float) ;
aten::mathremainder(float a, float b) -> (float) ;
aten::mathremainder(float a, int b) -> (float) ;
aten::mathremainder(int a, float b) -> (float) ;
aten::mathremainder(int a, int b) -> (float) ;
aten::matmul(Tensor self, Tensor other) -> (Tensor) ;
aten::matmul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::matrix_power(Tensor self, int n) -> (Tensor) ;
aten::matrix_rank(Tensor self, bool symmetric=False) -> (Tensor) ;
aten::matrix_rank.tol(Tensor self, float tol, bool symmetric=False) -> (Tensor) ;
aten::max(Tensor self) -> (Tensor) ;
aten::max.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices) ;
aten::max.other(Tensor self, Tensor other) -> (Tensor) ;
aten::max.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::max_pool1d(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], int[1] dilation=[1], bool ceil_mode=False) -> (Tensor) ;
aten::max_pool1d_with_indices(Tensor self, int[1] kernel_size, int[1] stride=[], int[1] padding=[0], int[1] dilation=[1], bool ceil_mode=False) -> (Tensor, Tensor) ;
aten::max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor) ;
aten::max_pool2d_with_indices(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor, Tensor) ;
aten::max_pool2d_with_indices_backward(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices) -> (Tensor) ;
aten::max_pool2d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::max_pool3d(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor) ;
aten::max_pool3d_with_indices(Tensor self, int[3] kernel_size, int[3] stride=[], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1], bool ceil_mode=False) -> (Tensor, Tensor) ;
aten::max_pool3d_with_indices_backward(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices) -> (Tensor) ;
aten::max_pool3d_with_indices_backward.grad_input(Tensor grad_output, Tensor self, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool ceil_mode, Tensor indices, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::max_unpool2d(Tensor self, Tensor indices, int[2] output_size) -> (Tensor) ;
aten::max_unpool2d.out(Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::max_unpool2d_backward(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size) -> (Tensor) ;
aten::max_unpool2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[2] output_size, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::max_unpool3d(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> (Tensor) ;
aten::max_unpool3d.out(Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::max_unpool3d_backward(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding) -> (Tensor) ;
aten::max_unpool3d_backward.grad_input(Tensor grad_output, Tensor self, Tensor indices, int[3] output_size, int[3] stride, int[3] padding, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::max_values(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor) ;
aten::mean(Tensor self, *, int? dtype=None) -> (Tensor) ;
aten::mean.dim(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor) ;
aten::mean.out(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::median(Tensor self) -> (Tensor) ;
aten::median.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices) ;
aten::meshgrid(Tensor[] tensors) -> (Tensor[]) ;
aten::min(Tensor self) -> (Tensor) ;
aten::min.dim(Tensor self, int dim, bool keepdim=False) -> (Tensor values, Tensor indices) ;
aten::min.other(Tensor self, Tensor other) -> (Tensor) ;
aten::min.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::min_values(Tensor self, int[1] dim, bool keepdim=False) -> (Tensor) ;
aten::miopen_batch_norm(Tensor input, Tensor weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float exponential_average_factor, float epsilon) -> (Tensor, Tensor, Tensor) ;
aten::miopen_batch_norm_backward(Tensor input, Tensor grad_output, Tensor weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_var, float epsilon) -> (Tensor, Tensor, Tensor) ;
aten::miopen_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::miopen_convolution_backward_bias(Tensor grad_output) -> (Tensor) ;
aten::miopen_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_convolution_transpose(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_convolution_transpose_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] output_padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::miopen_convolution_transpose_backward_input(Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_convolution_transpose_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_depthwise_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_depthwise_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::miopen_depthwise_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_depthwise_convolution_backward_weight(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool benchmark, bool deterministic) -> (Tensor) ;
aten::miopen_rnn(Tensor input, Tensor[] weight, int weight_stride0, Tensor hx, Tensor? cx, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state) -> (Tensor, Tensor, Tensor, Tensor, Tensor) ;
aten::miopen_rnn_backward(Tensor input, Tensor[] weight, int weight_stride0, Tensor weight_buf, Tensor hx, Tensor? cx, Tensor output, Tensor? grad_output, Tensor? grad_hy, Tensor? grad_cy, int mode, int hidden_size, int num_layers, bool batch_first, float dropout, bool train, bool bidirectional, int[] batch_sizes, Tensor? dropout_state, Tensor reserve, bool[4] output_mask) -> (Tensor, Tensor, Tensor, Tensor[]) ;
aten::mkldnn_adaptive_avg_pool2d(Tensor self, int[2] output_size) -> (Tensor) ;
aten::mkldnn_convolution(Tensor self, Tensor weight, Tensor? bias, int[] padding, int[] stride, int[] dilation, int groups) -> (Tensor) ;
aten::mkldnn_convolution_backward(Tensor self, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::mkldnn_convolution_backward_input(int[] self_size, Tensor grad_output, Tensor weight, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor) ;
aten::mkldnn_convolution_backward_weights(int[] weight_size, Tensor grad_output, Tensor self, int[] padding, int[] stride, int[] dilation, int groups, bool bias_defined) -> (Tensor, Tensor) ;
aten::mkldnn_linear(Tensor input, Tensor weight, Tensor? bias=None) -> (Tensor) ;
aten::mkldnn_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor) ;
aten::mkldnn_reorder_conv2d_weight(Tensor self, int[2] padding=[0, 0], int[2] stride=[1, 1], int[2] dilation=[1, 1], int groups=1) -> (Tensor) ;
aten::mm(Tensor self, Tensor mat2) -> (Tensor) ;
aten::mm.out(Tensor self, Tensor mat2, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::mode(Tensor self, int dim=-1, bool keepdim=False) -> (Tensor values, Tensor indices) ;
aten::modf(float a) -> (float, float) ;
aten::mse_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor) ;
aten::mse_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::mse_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor) ;
aten::mse_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::mul(Scalar a, Scalar b) -> (Scalar) ;
aten::mul(Tensor[] l, int n) -> (Tensor[]) ;
aten::mul(bool[] l, int n) -> (bool[]) ;
aten::mul(float a, float b) -> (float) ;
aten::mul(float a, int b) -> (float) ;
aten::mul(float[] l, int n) -> (float[]) ;
aten::mul(int a, float b) -> (float) ;
aten::mul(int a, int b) -> (int) ;
aten::mul(int n, Tensor[] l) -> (Tensor[]) ;
aten::mul(int n, bool[] l) -> (bool[]) ;
aten::mul(int n, float[] l) -> (float[]) ;
aten::mul(int n, int[] l) -> (int[]) ;
aten::mul(int n, t[] l) -> (t[]) ;
aten::mul(int[] l, int n) -> (int[]) ;
aten::mul(t[] l, int n) -> (t[]) ;
aten::mul.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::mul.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::mul.out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::mul_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::mul_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::multi_margin_loss(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=1) -> (Tensor) ;
aten::multi_margin_loss.out(Tensor self, Tensor target, Scalar p=1, Scalar margin=1, Tensor? weight=None, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::multi_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=1) -> (Tensor) ;
aten::multi_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Scalar p, Scalar margin, Tensor? weight=None, int reduction=1, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::multilabel_margin_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor) ;
aten::multilabel_margin_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::multilabel_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target) -> (Tensor) ;
aten::multilabel_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, Tensor is_target, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::multilabel_margin_loss_forward(Tensor self, Tensor target, int reduction) -> (Tensor output, Tensor is_target) ;
aten::multinomial(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None) -> (Tensor) ;
aten::multinomial.out(Tensor self, int num_samples, bool replacement=False, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::mv(Tensor self, Tensor vec) -> (Tensor) ;
aten::mv.out(Tensor self, Tensor vec, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::mvlgamma(Tensor self, int p) -> (Tensor) ;
aten::mvlgamma_(Tensor(a!) self, int p) -> (Tensor(a!)) ;
aten::narrow(Tensor(a) self, int dim, int start, int length) -> (Tensor(a)) ;
aten::narrow_copy(Tensor self, int dim, int start, int length) -> (Tensor) ;
aten::native_batch_norm(Tensor input, Tensor? weight, Tensor? bias, Tensor? running_mean, Tensor? running_var, bool training, float momentum, float eps) -> (Tensor, Tensor, Tensor) ;
aten::native_batch_norm_backward(Tensor grad_out, Tensor input, Tensor? weight, Tensor? running_mean, Tensor? running_var, Tensor? save_mean, Tensor? save_invstd, bool train, float eps, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::native_layer_norm(Tensor input, Tensor? weight, Tensor? bias, int M, int N, float eps) -> (Tensor, Tensor, Tensor) ;
aten::native_layer_norm_backward(Tensor grad_out, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::native_layer_norm_double_backward(Tensor? ggI, Tensor? ggW, Tensor? ggb, Tensor gO, Tensor input, Tensor mean, Tensor rstd, Tensor? weight, int M, int N, bool[3] output_mask) -> (Tensor, Tensor, Tensor) ;
aten::native_norm(Tensor self, Scalar p=2) -> (Tensor) ;
aten::ne(Scalar a, Scalar b) -> (bool) ;
aten::ne(Tensor[] a, Tensor[] b) -> (bool) ;
aten::ne(bool[] a, bool[] b) -> (bool) ;
aten::ne(float a, float b) -> (bool) ;
aten::ne(float a, int b) -> (bool) ;
aten::ne(float[] a, float[] b) -> (bool) ;
aten::ne(int a, float b) -> (bool) ;
aten::ne(int a, int b) -> (bool) ;
aten::ne(int[] a, int[] b) -> (bool) ;
aten::ne(str a, str b) -> (bool) ;
aten::ne(str a, str b) -> (bool) ;
aten::ne.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::ne.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ne.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::ne.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ne_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::ne_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::neg(Scalar a) -> (Scalar) ;
aten::neg(Tensor self) -> (Tensor) ;
aten::neg(float a) -> (float) ;
aten::neg(int a) -> (int) ;
aten::neg.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::neg_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::new_empty(Tensor self, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::new_full(Tensor self, int[] size, Scalar fill_value, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::nll_loss(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100) -> (Tensor) ;
aten::nll_loss.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::nll_loss2d(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100) -> (Tensor) ;
aten::nll_loss2d.out(Tensor self, Tensor target, Tensor? weight=None, int reduction=1, int ignore_index=-100, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::nll_loss2d_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> (Tensor) ;
aten::nll_loss2d_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::nll_loss2d_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight) ;
aten::nll_loss_backward(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight) -> (Tensor) ;
aten::nll_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index, Tensor total_weight, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::nll_loss_forward(Tensor self, Tensor target, Tensor? weight, int reduction, int ignore_index) -> (Tensor output, Tensor total_weight) ;
aten::nonzero(Tensor self) -> (Tensor) ;
aten::nonzero.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::nonzero_numpy(Tensor self) -> (Tensor[]) ;
aten::norm.Scalar(Tensor self, Scalar p=2) -> (Tensor) ;
aten::norm.ScalarOpt_dim(Tensor self, Scalar? p, int[1] dim, bool keepdim=False) -> (Tensor) ;
aten::norm.ScalarOpt_dim_dtype(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, int dtype) -> (Tensor) ;
aten::norm.ScalarOpt_dtype(Tensor self, Scalar? p, *, int dtype) -> (Tensor) ;
aten::norm.dtype_out(Tensor self, Scalar? p, int[1] dim, bool keepdim, *, int dtype, Tensor(a!) out) -> (Tensor(a!)) ;
aten::norm.out(Tensor self, Scalar? p, int[1] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::norm_except_dim(Tensor v, int pow=2, int dim=0) -> (Tensor) ;
aten::normal.Tensor_Tensor(Tensor mean, Tensor std, *, Generator? generator=None) -> (Tensor) ;
aten::normal.Tensor_Tensor_out(Tensor mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::normal.Tensor_float(Tensor mean, float std=1., *, Generator? generator=None) -> (Tensor) ;
aten::normal.Tensor_float_out(Tensor mean, float std=1., *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::normal.float_Tensor(float mean, Tensor std, *, Generator? generator=None) -> (Tensor) ;
aten::normal.float_Tensor_out(float mean, Tensor std, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::normal.float_float(float mean, float std, int[] size, *, Generator? generator=None, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::normal.float_float_out(float mean, float std, int[] size, *, Generator? generator=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::normal_(Tensor(a!) self, float mean=0., float std=1., *, Generator? generator=None) -> (Tensor(a!)) ;
aten::nuclear_norm(Tensor self, bool keepdim=False) -> (Tensor) ;
aten::nuclear_norm.dim(Tensor self, int[2] dim, bool keepdim=False) -> (Tensor) ;
aten::nuclear_norm.dim_out(Tensor self, int[2] dim, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::nuclear_norm.out(Tensor self, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::numel(Tensor self) -> (int) ;
aten::numpy_T(Tensor(a) self) -> (Tensor(a)) ;
aten::oct(int i) -> (str) ;
aten::one_hot(Tensor self, int num_classes=-1) -> (Tensor) ;
aten::ones(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::ones.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ones_like(Tensor self) -> (Tensor) ;
aten::ones_like.dtype(Tensor self, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::ord(str string) -> (int) ;
aten::orgqr(Tensor self, Tensor input2) -> (Tensor) ;
aten::orgqr.out(Tensor self, Tensor input2, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::ormqr(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False) -> (Tensor) ;
aten::ormqr.out(Tensor self, Tensor input2, Tensor input3, bool left=True, bool transpose=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::output_nr(Tensor self) -> (int) ;
aten::pairwise_distance(Tensor x1, Tensor x2, float p=2., float eps=9.9999999999999995e-07, bool keepdim=False) -> (Tensor) ;
aten::partition(str self, str separator) -> (str, str, str) ;
aten::pdist(Tensor self, float p=2.) -> (Tensor) ;
aten::permute(Tensor(a) self, int[] dims) -> (Tensor(a)) ;
aten::pin_memory(Tensor self) -> (Tensor) ;
aten::pinverse(Tensor self, float rcond=1.0000000000000001e-15) -> (Tensor) ;
aten::pixel_shuffle(Tensor self, int upscale_factor) -> (Tensor) ;
aten::poisson(Tensor self, Generator? generator=None) -> (Tensor) ;
aten::poisson_nll_loss(Tensor input, Tensor target, bool log_input, bool full, float eps, int reduction) -> (Tensor) ;
aten::polygamma(int n, Tensor self) -> (Tensor) ;
aten::polygamma.out(int n, Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::polygamma_(Tensor(a!) self, int n) -> (Tensor(a!)) ;
aten::pop(Dict(Tensor, t)(a!) self, Tensor key) -> (t(*)) ;
aten::pop(Dict(Tensor, t)(a!) self, Tensor key, t default_value) -> (t(*)) ;
aten::pop(Dict(float, t)(a!) self, float key) -> (t(*)) ;
aten::pop(Dict(float, t)(a!) self, float key, t default_value) -> (t(*)) ;
aten::pop(Dict(int, t)(a!) self, int key) -> (t(*)) ;
aten::pop(Dict(int, t)(a!) self, int key, t default_value) -> (t(*)) ;
aten::pop(Dict(str, t)(a!) self, str key) -> (t(*)) ;
aten::pop(Dict(str, t)(a!) self, str key, t default_value) -> (t(*)) ;
aten::pop(Tensor[](a!) self, int idx=-1) -> (Tensor(*)) ;
aten::pop(bool[](a!) self, int idx=-1) -> (bool) ;
aten::pop(float[](a!) self, int idx=-1) -> (float) ;
aten::pop(int[](a!) self, int idx=-1) -> (int) ;
aten::pop(t[](a!) self, int idx=-1) -> (t(*)) ;
aten::popitem(Dict(Tensor, t)(a!) self) -> ((Tensor, t)) ;
aten::popitem(Dict(float, t)(a!) self) -> ((float, t)) ;
aten::popitem(Dict(int, t)(a!) self) -> ((int, t)) ;
aten::popitem(Dict(str, t)(a!) self) -> ((str, t)) ;
aten::pow(Scalar a, Scalar b) -> (Scalar) ;
aten::pow(Scalar a, Scalar b) -> (float) ;
aten::pow(float a, float b) -> (float) ;
aten::pow(float a, float b) -> (float) ;
aten::pow(float a, int b) -> (float) ;
aten::pow(float a, int b) -> (float) ;
aten::pow(int a, float b) -> (float) ;
aten::pow(int a, float b) -> (float) ;
aten::pow(int a, int b) -> (float) ;
aten::pow(int a, int b) -> (int) ;
aten::pow.Scalar(Scalar self, Tensor exponent) -> (Tensor) ;
aten::pow.Scalar_out(Scalar self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::pow.Tensor_Scalar(Tensor self, Scalar exponent) -> (Tensor) ;
aten::pow.Tensor_Scalar_out(Tensor self, Scalar exponent, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::pow.Tensor_Tensor(Tensor self, Tensor exponent) -> (Tensor) ;
aten::pow.Tensor_Tensor_out(Tensor self, Tensor exponent, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::pow_.Scalar(Tensor(a!) self, Scalar exponent) -> (Tensor(a!)) ;
aten::pow_.Tensor(Tensor(a!) self, Tensor exponent) -> (Tensor(a!)) ;
aten::prelu(Tensor self, Tensor weight) -> (Tensor) ;
aten::prelu_backward(Tensor grad_output, Tensor self, Tensor weight) -> (Tensor, Tensor) ;
aten::prod(Tensor self, *, int? dtype=None) -> (Tensor) ;
aten::prod.dim_int(Tensor self, int dim, bool keepdim=False, *, int? dtype=None) -> (Tensor) ;
aten::prod.int_out(Tensor self, int dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::promote_types(int type1, int type2) -> (int) ;
aten::put_(Tensor(a!) self, Tensor index, Tensor source, bool accumulate=False) -> (Tensor(a!)) ;
aten::q_per_channel_axis(Tensor self) -> (int) ;
aten::q_per_channel_scales(Tensor self) -> (Tensor) ;
aten::q_per_channel_zero_points(Tensor self) -> (Tensor) ;
aten::q_scale(Tensor self) -> (float) ;
aten::q_zero_point(Tensor self) -> (int) ;
aten::qr(Tensor self, bool some=True) -> (Tensor Q, Tensor R) ;
aten::qscheme(Tensor self) -> (int) ;
aten::quantize_per_channel(Tensor self, Tensor scales, Tensor zero_points, int axis, int dtype) -> (Tensor) ;
aten::quantize_per_tensor(Tensor self, float scale, int zero_point, int dtype) -> (Tensor) ;
aten::quantized_gru.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor) ;
aten::quantized_gru.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor) ;
aten::quantized_gru_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor) ;
aten::quantized_lstm(Tensor input, Tensor[] hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first, *, int? dtype=None, bool use_dynamic=False) -> (Tensor, Tensor, Tensor) ;
aten::quantized_lstm_cell(Tensor input, Tensor[] hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor, Tensor) ;
aten::quantized_max_pool2d(Tensor self, int[2] kernel_size, int[2] stride=[], int[2] padding=[0, 0], int[2] dilation=[1, 1], bool ceil_mode=False) -> (Tensor) ;
aten::quantized_rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor) ;
aten::quantized_rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor b_ih, Tensor b_hh, Tensor packed_ih, Tensor packed_hh, Tensor col_offsets_ih, Tensor col_offsets_hh, Scalar scale_ih, Scalar scale_hh, Scalar zero_point_ih, Scalar zero_point_hh) -> (Tensor) ;
aten::radians(Scalar a) -> (Scalar) ;
aten::radians(float a) -> (float) ;
aten::radians(int a) -> (float) ;
aten::rand(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::rand.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::rand_like(Tensor self) -> (Tensor) ;
aten::rand_like.dtype(Tensor self, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::randint(int high, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::randint.low(int low, int high, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::randint.low_out(int low, int high, int[] size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::randint.out(int high, int[] size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::randint_like(Tensor self, int high) -> (Tensor) ;
aten::randint_like.dtype(Tensor self, int high, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::randint_like.low(Tensor self, int low, int high) -> (Tensor) ;
aten::randint_like.low_dtype(Tensor self, int low, int high, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::randn(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::randn.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::randn_like(Tensor self) -> (Tensor) ;
aten::randn_like.dtype(Tensor self, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::random_(Tensor(a!) self, *, Generator? generator=None) -> (Tensor(a!)) ;
aten::random_.from(Tensor(a!) self, int from, int to, *, Generator? generator=None) -> (Tensor(a!)) ;
aten::random_.to(Tensor(a!) self, int to, *, Generator? generator=None) -> (Tensor(a!)) ;
aten::randperm(int n, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::randperm.out(int n, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::range(Scalar start, Scalar end, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::range.out(Scalar start, Scalar end, Scalar step=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::range.step(Scalar start, Scalar end, Scalar step=1, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::reciprocal(Tensor self) -> (Tensor) ;
aten::reciprocal.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::reciprocal_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::reflection_pad1d(Tensor self, int[2] padding) -> (Tensor) ;
aten::reflection_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::reflection_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> (Tensor) ;
aten::reflection_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::reflection_pad2d(Tensor self, int[4] padding) -> (Tensor) ;
aten::reflection_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::reflection_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> (Tensor) ;
aten::reflection_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::relu(Tensor self) -> (Tensor) ;
aten::relu_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::remainder(Scalar a, Scalar b) -> (Scalar) ;
aten::remainder(float a, float b) -> (float) ;
aten::remainder(float a, int b) -> (float) ;
aten::remainder(int a, float b) -> (float) ;
aten::remainder(int a, int b) -> (int) ;
aten::remainder.Scalar(Tensor self, Scalar other) -> (Tensor) ;
aten::remainder.Scalar_out(Tensor self, Scalar other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::remainder.Tensor(Tensor self, Tensor other) -> (Tensor) ;
aten::remainder.Tensor_out(Tensor self, Tensor other, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::remainder_.Scalar(Tensor(a!) self, Scalar other) -> (Tensor(a!)) ;
aten::remainder_.Tensor(Tensor(a!) self, Tensor other) -> (Tensor(a!)) ;
aten::remove(Tensor[](a!) self, Tensor el) -> () ;
aten::remove(bool[](a!) self, bool el) -> () ;
aten::remove(float[](a!) self, float el) -> () ;
aten::remove(int[](a!) self, int el) -> () ;
aten::renorm(Tensor self, Scalar p, int dim, Scalar maxnorm) -> (Tensor) ;
aten::renorm.out(Tensor self, Scalar p, int dim, Scalar maxnorm, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::renorm_(Tensor(a!) self, Scalar p, int dim, Scalar maxnorm) -> (Tensor(a!)) ;
aten::repeat(Tensor self, int[] repeats) -> (Tensor) ;
aten::repeat_interleave.Tensor(Tensor repeats) -> (Tensor) ;
aten::repeat_interleave.self_Tensor(Tensor self, Tensor repeats, int? dim=None) -> (Tensor) ;
aten::repeat_interleave.self_int(Tensor self, int repeats, int? dim=None) -> (Tensor) ;
aten::replace(str self, str old, str new, int max=-1) -> (str) ;
aten::replication_pad1d(Tensor self, int[2] padding) -> (Tensor) ;
aten::replication_pad1d.out(Tensor self, int[2] padding, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::replication_pad1d_backward(Tensor grad_output, Tensor self, int[2] padding) -> (Tensor) ;
aten::replication_pad1d_backward.grad_input(Tensor grad_output, Tensor self, int[2] padding, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::replication_pad2d(Tensor self, int[4] padding) -> (Tensor) ;
aten::replication_pad2d.out(Tensor self, int[4] padding, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::replication_pad2d_backward(Tensor grad_output, Tensor self, int[4] padding) -> (Tensor) ;
aten::replication_pad2d_backward.grad_input(Tensor grad_output, Tensor self, int[4] padding, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::replication_pad3d(Tensor self, int[6] padding) -> (Tensor) ;
aten::replication_pad3d.out(Tensor self, int[6] padding, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::replication_pad3d_backward(Tensor grad_output, Tensor self, int[6] padding) -> (Tensor) ;
aten::replication_pad3d_backward.grad_input(Tensor grad_output, Tensor self, int[6] padding, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::reshape(Tensor self, int[] shape) -> (Tensor) ;
aten::reshape_as(Tensor self, Tensor other) -> (Tensor) ;
aten::resize_(Tensor(a!) self, int[] size) -> (Tensor(a!)) ;
aten::resize_as_(Tensor(a!) self, Tensor the_template) -> (Tensor(a!)) ;
aten::result_type.Scalar(Tensor tensor, Scalar other) -> (int) ;
aten::result_type.Scalar_Scalar(Scalar scalar1, Scalar scalar2) -> (int) ;
aten::result_type.Scalar_Tensor(Scalar scalar, Tensor tensor) -> (int) ;
aten::result_type.Tensor(Tensor tensor, Tensor other) -> (int) ;
aten::reverse(Tensor[](a!) self) -> () ;
aten::reverse(bool[](a!) self) -> () ;
aten::reverse(float[](a!) self) -> () ;
aten::reverse(int[](a!) self) -> () ;
aten::reverse(t[](a!) self) -> () ;
aten::rfft(Tensor self, int signal_ndim, bool normalized=False, bool onesided=True) -> (Tensor) ;
aten::rfind(str self, str substr, int start=0, int end=-1) -> (int) ;
aten::rindex(str self, str substr, int start=0, int end=-1) -> (int) ;
aten::rjust(str self, int width, str fillchar='\040') -> (str) ;
aten::rnn_relu.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor) ;
aten::rnn_relu.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor) ;
aten::rnn_relu_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor) ;
aten::rnn_tanh.data(Tensor data, Tensor batch_sizes, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional) -> (Tensor, Tensor) ;
aten::rnn_tanh.input(Tensor input, Tensor hx, Tensor[] params, bool has_biases, int num_layers, float dropout, bool train, bool bidirectional, bool batch_first) -> (Tensor, Tensor) ;
aten::rnn_tanh_cell(Tensor input, Tensor hx, Tensor w_ih, Tensor w_hh, Tensor? b_ih=None, Tensor? b_hh=None) -> (Tensor) ;
aten::roll(Tensor self, int[1] shifts, int[1] dims=[]) -> (Tensor) ;
aten::rot90(Tensor self, int k=1, int[] dims=[0, 1]) -> (Tensor) ;
aten::round(Scalar a) -> (Scalar) ;
aten::round(Tensor self) -> (Tensor) ;
aten::round(float a) -> (float) ;
aten::round(int a) -> (float) ;
aten::round.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::round_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::rpartition(str self, str separator) -> (str, str, str) ;
aten::rrelu(Tensor self, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor) ;
aten::rrelu_(Tensor(a!) self, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor(a!)) ;
aten::rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor) ;
aten::rrelu_with_noise.out(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::rrelu_with_noise_(Tensor(a!) self, Tensor noise, Scalar lower=0.125, Scalar upper=0.33333333333333331, bool training=False, Generator? generator=None) -> (Tensor(a!)) ;
aten::rrelu_with_noise_backward(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training) -> (Tensor) ;
aten::rrelu_with_noise_backward.grad_input(Tensor grad_output, Tensor self, Tensor noise, Scalar lower, Scalar upper, bool training, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::rsplit(str self, str separator='\040', int max=-1) -> (str[]) ;
aten::rsqrt(Tensor self) -> (Tensor) ;
aten::rsqrt.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::rsqrt_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::rstrip(str self, str chars='\040\012\011\014\013') -> (str) ;
aten::rsub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor) ;
aten::rsub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor) ;
aten::save(t item, str filename) -> () ;
aten::scalar_tensor(Scalar s, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::scatter.src(Tensor self, int dim, Tensor index, Tensor src) -> (Tensor) ;
aten::scatter.value(Tensor self, int dim, Tensor index, Scalar value) -> (Tensor) ;
aten::scatter_.src(Tensor(a!) self, int dim, Tensor index, Tensor src) -> (Tensor(a!)) ;
aten::scatter_.value(Tensor(a!) self, int dim, Tensor index, Scalar value) -> (Tensor(a!)) ;
aten::scatter_add(Tensor self, int dim, Tensor index, Tensor src) -> (Tensor) ;
aten::scatter_add_(Tensor(a!) self, int dim, Tensor index, Tensor src) -> (Tensor(a!)) ;
aten::select(Tensor[](a) list, int idx) -> (Tensor(*)) ;
aten::select(bool[] a, int b) -> (bool) ;
aten::select(float[] a, int b) -> (float) ;
aten::select(int[] a, int b) -> (int) ;
aten::select(t[](a) list, int idx) -> (t(*)) ;
aten::select.int(Tensor(a) self, int dim, int index) -> (Tensor(a)) ;
aten::selu(Tensor self) -> (Tensor) ;
aten::selu_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::set_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::set_.source_Tensor(Tensor(a!) self, Tensor source) -> (Tensor(a!)) ;
aten::setdefault(Dict(Tensor, t)(a!) self, Tensor key, t default_value) -> (t(*)) ;
aten::setdefault(Dict(float, t)(a!) self, float key, t default_value) -> (t(*)) ;
aten::setdefault(Dict(int, t)(a!) self, int key, t default_value) -> (t(*)) ;
aten::setdefault(Dict(str, t)(a!) self, str key, t default_value) -> (t(*)) ;
aten::sigmoid(Tensor self) -> (Tensor) ;
aten::sigmoid.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::sigmoid_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::sigmoid_backward(Tensor grad_output, Tensor output) -> (Tensor) ;
aten::sigmoid_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::sign(Tensor self) -> (Tensor) ;
aten::sign.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::sign_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::sin(Scalar a) -> (Scalar) ;
aten::sin(Tensor self) -> (Tensor) ;
aten::sin(float a) -> (float) ;
aten::sin(int a) -> (float) ;
aten::sin.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::sin_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::sinh(Scalar a) -> (Scalar) ;
aten::sinh(Scalar a) -> (Scalar) ;
aten::sinh(Tensor self) -> (Tensor) ;
aten::sinh(float a) -> (float) ;
aten::sinh(float a) -> (float) ;
aten::sinh(int a) -> (float) ;
aten::sinh(int a) -> (float) ;
aten::sinh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::sinh_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::size(Tensor self) -> (int[]) ;
aten::size.int(Tensor self, int dim) -> (int) ;
aten::sizes(Tensor self) -> (int) ;
aten::slice(Tensor[] l, int start, int end=9223372036854775807, int step=1) -> (Tensor[]) ;
aten::slice(bool[] l, int start, int end=9223372036854775807, int step=1) -> (bool[]) ;
aten::slice(float[] l, int start, int end=9223372036854775807, int step=1) -> (float[]) ;
aten::slice(int[] l, int start, int end=9223372036854775807, int step=1) -> (int[]) ;
aten::slice(t[] l, int start, int end=9223372036854775807, int step=1) -> (t[]) ;
aten::slice.Tensor(Tensor(a) self, int dim=0, int start=0, int end=9223372036854775807, int step=1) -> (Tensor(a)) ;
aten::slice.str(str string, int start, int end=9223372036854775807, int step=1) -> (str) ;
aten::slogdet(Tensor self) -> (Tensor sign, Tensor logabsdet) ;
aten::slow_conv_dilated2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor) ;
aten::slow_conv_dilated2d_backward(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias) ;
aten::slow_conv_dilated3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] dilation=[1, 1, 1]) -> (Tensor) ;
aten::slow_conv_dilated3d_backward(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] dilation, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias) ;
aten::slow_conv_transpose2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor) ;
aten::slow_conv_transpose2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] output_padding=[0, 0], int[2] dilation=[1, 1], *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::slow_conv_transpose2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] output_padding, int[2] dilation, Tensor columns, Tensor ones, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias) ;
aten::slow_conv_transpose3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int[3] dilation=[1, 1, 1]) -> (Tensor) ;
aten::slow_conv_transpose3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], int[3] output_padding=[0, 0, 0], int[3] dilation=[1, 1, 1], *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::slow_conv_transpose3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, int[3] output_padding, int[3] dilation, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias) ;
aten::smm(Tensor self, Tensor mat2) -> (Tensor) ;
aten::smooth_l1_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor) ;
aten::smooth_l1_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::smooth_l1_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor) ;
aten::smooth_l1_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::soft_margin_loss(Tensor self, Tensor target, int reduction=1) -> (Tensor) ;
aten::soft_margin_loss.out(Tensor self, Tensor target, int reduction=1, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::soft_margin_loss_backward(Tensor grad_output, Tensor self, Tensor target, int reduction) -> (Tensor) ;
aten::soft_margin_loss_backward.grad_input(Tensor grad_output, Tensor self, Tensor target, int reduction, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::softmax(Tensor self, int dim, int? dtype=None) -> (Tensor) ;
aten::softplus(Tensor self, Scalar beta=1, Scalar threshold=20) -> (Tensor) ;
aten::softplus.out(Tensor self, Scalar beta=1, Scalar threshold=20, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::softplus_backward(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output) -> (Tensor) ;
aten::softplus_backward.grad_input(Tensor grad_output, Tensor self, Scalar beta, Scalar threshold, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::softshrink(Tensor self, Scalar lambd=0.5) -> (Tensor) ;
aten::softshrink.out(Tensor self, Scalar lambd=0.5, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::softshrink_backward(Tensor grad_output, Tensor self, Scalar lambd) -> (Tensor) ;
aten::softshrink_backward.grad_input(Tensor grad_output, Tensor self, Scalar lambd, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::solve(Tensor self, Tensor A) -> (Tensor solution, Tensor LU) ;
aten::sort(Tensor self, int dim=-1, bool descending=False) -> (Tensor values, Tensor indices) ;
aten::sort(Tensor[](a!) self, bool reverse=False) -> () ;
aten::sort(bool[](a!) self, bool reverse=False) -> () ;
aten::sort(float[](a!) self, bool reverse=False) -> () ;
aten::sort(int[](a!) self, bool reverse=False) -> () ;
aten::sort(t[](a!) self, bool reverse=False) -> () ;
aten::sorted(Tensor[](a) input) -> (Tensor[]) ;
aten::sorted(bool[](a) input) -> (bool[]) ;
aten::sorted(float[](a) input) -> (float[]) ;
aten::sorted(int[](a) input) -> (int[]) ;
aten::sorted(t[](a) self) -> (t[]) ;
aten::sparse_coo_tensor.indices(Tensor indices, Tensor values, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::sparse_coo_tensor.indices_size(Tensor indices, Tensor values, int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::sparse_coo_tensor.size(int[] size, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::sparse_dim(Tensor self) -> (int) ;
aten::sparse_mask(Tensor self, Tensor mask) -> (Tensor) ;
aten::sparse_resize_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> (Tensor(a!)) ;
aten::sparse_resize_and_clear_(Tensor(a!) self, int[] size, int sparse_dim, int dense_dim) -> (Tensor(a!)) ;
aten::split(Tensor self, int[] split_sizes, int dim=0) -> (Tensor[]) ;
aten::split.Tensor(Tensor(a) self, int split_size, int dim=0) -> (Tensor[]) ;
aten::split.str(str self, str separator='\040', int max=-1) -> (str[]) ;
aten::split_with_sizes(Tensor self, int[] split_sizes, int dim=0) -> (Tensor[]) ;
aten::splitlines(str self, bool keepends=False) -> (str[]) ;
aten::sqrt(Scalar a) -> (Scalar) ;
aten::sqrt(Tensor self) -> (Tensor) ;
aten::sqrt(float a) -> (float) ;
aten::sqrt(int a) -> (float) ;
aten::sqrt.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::sqrt_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::squeeze(Tensor(a) self) -> (Tensor(a)) ;
aten::squeeze.dim(Tensor(a) self, int dim) -> (Tensor(a)) ;
aten::squeeze_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::squeeze_.dim(Tensor(a!) self, int dim) -> (Tensor(a!)) ;
aten::sspaddmm(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1) -> (Tensor) ;
aten::sspaddmm.out(Tensor self, Tensor mat1, Tensor mat2, *, Scalar beta=1, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::stack(Tensor[] tensors, int dim=0) -> (Tensor) ;
aten::stack.out(Tensor[] tensors, int dim=0, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::startswith(str self, str substr, int start=0, int end=-1) -> (bool) ;
aten::std(Tensor self, bool unbiased=True) -> (Tensor) ;
aten::std.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor) ;
aten::std.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::std_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor) ;
aten::std_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor) ;
aten::stft(Tensor self, int n_fft, int? hop_length=None, int? win_length=None, Tensor? window=None, bool normalized=False, bool onesided=True) -> (Tensor) ;
aten::storage_offset(Tensor self) -> (int) ;
aten::storage_offset(Tensor self) -> (int) ;
aten::storage_offset(Tensor self) -> (int) ;
aten::str(t elem) -> (str) ;
aten::stride.int(Tensor self, int dim) -> (int) ;
aten::strides(Tensor self) -> (int) ;
aten::strip(str self, str chars='\040\012\011\014\013') -> (str) ;
aten::sub(Scalar a, Scalar b) -> (Scalar) ;
aten::sub(float a, float b) -> (float) ;
aten::sub(float a, int b) -> (float) ;
aten::sub(int a, float b) -> (float) ;
aten::sub(int a, int b) -> (int) ;
aten::sub.Scalar(Tensor self, Scalar other, Scalar alpha=1) -> (Tensor) ;
aten::sub.Tensor(Tensor self, Tensor other, *, Scalar alpha=1) -> (Tensor) ;
aten::sub.out(Tensor self, Tensor other, *, Scalar alpha=1, Tensor(a!) out) -> (Tensor(a!)) ;
aten::sub_.Scalar(Tensor(a!) self, Scalar other, Scalar alpha=1) -> (Tensor(a!)) ;
aten::sub_.Tensor(Tensor(a!) self, Tensor other, *, Scalar alpha=1) -> (Tensor(a!)) ;
aten::sum(Tensor self, *, int? dtype=None) -> (Tensor) ;
aten::sum.IntList_out(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None, Tensor(a!) out) -> (Tensor(a!)) ;
aten::sum.dim_IntList(Tensor self, int[1] dim, bool keepdim=False, *, int? dtype=None) -> (Tensor) ;
aten::sum_to_size(Tensor self, int[] size) -> (Tensor) ;
aten::svd(Tensor self, bool some=True, bool compute_uv=True) -> (Tensor U, Tensor S, Tensor V) ;
aten::swapcase(str self) -> (str) ;
aten::symeig(Tensor self, bool eigenvectors=False, bool upper=True) -> (Tensor eigenvalues, Tensor eigenvectors) ;
aten::t(Tensor(a) self) -> (Tensor(a)) ;
aten::t_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::take(Tensor self, Tensor index) -> (Tensor) ;
aten::take.out(Tensor self, Tensor index, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::tan(Scalar a) -> (Scalar) ;
aten::tan(Tensor self) -> (Tensor) ;
aten::tan(float a) -> (float) ;
aten::tan(int a) -> (float) ;
aten::tan.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::tan_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::tanh(Scalar a) -> (Scalar) ;
aten::tanh(Scalar a) -> (Scalar) ;
aten::tanh(Tensor self) -> (Tensor) ;
aten::tanh(float a) -> (float) ;
aten::tanh(float a) -> (float) ;
aten::tanh(int a) -> (float) ;
aten::tanh(int a) -> (float) ;
aten::tanh.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::tanh_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::tanh_backward(Tensor grad_output, Tensor output) -> (Tensor) ;
aten::tanh_backward.grad_input(Tensor grad_output, Tensor output, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::tensor(bool t, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor) ;
aten::tensor(float t, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor) ;
aten::tensor(int t, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor) ;
aten::tensor(t[] data, *, int? dtype=None, Device? device=None, bool requires_grad=False) -> (Tensor) ;
aten::tensordot(Tensor self, Tensor other, int[] dims_self, int[] dims_other) -> (Tensor) ;
aten::thnn_conv2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0]) -> (Tensor) ;
aten::thnn_conv2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::thnn_conv2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias) ;
aten::thnn_conv2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input) ;
aten::thnn_conv3d(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0]) -> (Tensor) ;
aten::thnn_conv3d.out(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias=None, int[3] stride=[1, 1, 1], int[3] padding=[0, 0, 0], *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::thnn_conv3d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[3] kernel_size, int[3] stride, int[3] padding, Tensor finput, Tensor fgrad_input, bool[3] output_mask) -> (Tensor grad_input, Tensor grad_weight, Tensor grad_bias) ;
aten::thnn_conv3d_forward(Tensor self, Tensor weight, int[3] kernel_size, Tensor? bias, int[3] stride, int[3] padding) -> (Tensor output, Tensor finput, Tensor fgrad_input) ;
aten::thnn_conv_depthwise2d(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1]) -> (Tensor) ;
aten::thnn_conv_depthwise2d.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias=None, int[2] stride=[1, 1], int[2] padding=[0, 0], int[2] dilation=[1, 1], *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::thnn_conv_depthwise2d_backward.output_mask(Tensor grad_output, Tensor self, Tensor weight, int[2] kernel_size, int[2] stride, int[2] padding, int[2] dilation, bool[2] output_mask) -> (Tensor grad_input, Tensor grad_weight) ;
aten::thnn_conv_depthwise2d_forward(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation) -> (Tensor) ;
aten::thnn_conv_depthwise2d_forward.out(Tensor self, Tensor weight, int[2] kernel_size, Tensor? bias, int[2] stride, int[2] padding, int[2] dilation, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::threshold(Tensor self, Scalar threshold, Scalar value) -> (Tensor) ;
aten::threshold.out(Tensor self, Scalar threshold, Scalar value, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::threshold_(Tensor(a!) self, Scalar threshold, Scalar value) -> (Tensor(a!)) ;
aten::threshold_backward(Tensor grad_output, Tensor self, Scalar threshold) -> (Tensor) ;
aten::title(str self) -> (str) ;
aten::to(Tensor(a) self, Device? device, int? dtype=None, bool non_blocking=False, bool copy=False) -> (Tensor(a|b)) ;
aten::to(Tensor(a) self, bool non_blocking=False, bool copy=False) -> (Tensor(a|b)) ;
aten::to(Tensor(a) self, int? dtype=None, bool non_blocking=False, bool copy=False) -> (Tensor(a|b)) ;
aten::to.device(Tensor self, Device device, int dtype, bool non_blocking=False, bool copy=False) -> (Tensor) ;
aten::to.device(Tensor self, Device device, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor) ;
aten::to.dtype(Tensor self, int dtype, bool non_blocking=False, bool copy=False) -> (Tensor) ;
aten::to.dtype(Tensor self, int dtype, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor) ;
aten::to.dtype_layout(Tensor self, *, int dtype, int layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False) -> (Tensor) ;
aten::to.dtype_layout(Tensor self, *, int dtype, int layout, Device device, bool pin_memory=False, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor) ;
aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False) -> (Tensor) ;
aten::to.other(Tensor self, Tensor other, bool non_blocking=False, bool copy=False, int? memory_format=None) -> (Tensor) ;
aten::to_dense(Tensor self) -> (Tensor) ;
aten::to_dense_backward(Tensor grad, Tensor input) -> (Tensor) ;
aten::to_mkldnn(Tensor self) -> (Tensor) ;
aten::to_mkldnn_backward(Tensor grad, Tensor input) -> (Tensor) ;
aten::to_sparse(Tensor self) -> (Tensor) ;
aten::to_sparse.sparse_dim(Tensor self, int sparse_dim) -> (Tensor) ;
aten::topk(Tensor self, int k, int dim=-1, bool largest=True, bool sorted=True) -> (Tensor values, Tensor indices) ;
aten::trace(Tensor self) -> (Tensor) ;
aten::transpose.int(Tensor(a) self, int dim0, int dim1) -> (Tensor(a)) ;
aten::transpose_(Tensor(a!) self, int dim0, int dim1) -> (Tensor(a!)) ;
aten::trapz.dx(Tensor y, *, float dx=1., int dim=-1) -> (Tensor) ;
aten::trapz.x(Tensor y, Tensor x, *, int dim=-1) -> (Tensor) ;
aten::triangular_solve(Tensor self, Tensor A, bool upper=True, bool transpose=False, bool unitriangular=False) -> (Tensor solution, Tensor cloned_coefficient) ;
aten::tril(Tensor self, int diagonal=0) -> (Tensor) ;
aten::tril.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::tril_(Tensor(a!) self, int diagonal=0) -> (Tensor(a!)) ;
aten::tril_indices(int row, int col, int offset=0, *, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::triplet_margin_loss(Tensor anchor, Tensor positive, Tensor negative, float margin=1., float p=2., float eps=9.9999999999999995e-07, bool swap=False, int reduction=1) -> (Tensor) ;
aten::triu(Tensor self, int diagonal=0) -> (Tensor) ;
aten::triu.out(Tensor self, int diagonal=0, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::triu_(Tensor(a!) self, int diagonal=0) -> (Tensor(a!)) ;
aten::triu_indices(int row, int col, int offset=0, *, int? dtype=4, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::trunc(Tensor self) -> (Tensor) ;
aten::trunc.out(Tensor self, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::trunc_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::type_as(Tensor self, Tensor other) -> (Tensor) ;
aten::unbind.int(Tensor(a) self, int dim=0) -> (Tensor[]) ;
aten::unfold(Tensor(a) self, int dimension, int size, int step) -> (Tensor(a)) ;
aten::uniform_(Tensor(a!) self, float from=0., float to=1., *, Generator? generator=None) -> (Tensor(a!)) ;
aten::unique_consecutive(Tensor self, bool return_inverse=False, bool return_counts=False, int? dim=None) -> (Tensor, Tensor, Tensor) ;
aten::unique_dim(Tensor self, int dim, bool sorted=True, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor) ;
aten::unique_dim_consecutive(Tensor self, int dim, bool return_inverse=False, bool return_counts=False) -> (Tensor, Tensor, Tensor) ;
aten::unsqueeze(Tensor(a) self, int dim) -> (Tensor(a)) ;
aten::unsqueeze_(Tensor(a!) self, int dim) -> (Tensor(a!)) ;
aten::update(Dict(Tensor, t)(a!) self, Dict(Tensor, t)(a!) to_add) -> () ;
aten::update(Dict(float, t)(a!) self, Dict(float, t)(a!) to_add) -> () ;
aten::update(Dict(int, t)(a!) self, Dict(int, t)(a!) to_add) -> () ;
aten::update(Dict(str, t)(a!) self, Dict(str, t)(a!) to_add) -> () ;
aten::upper(str self) -> (str) ;
aten::upsample_bicubic2d(Tensor self, int[2] output_size, bool align_corners) -> (Tensor) ;
aten::upsample_bicubic2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::upsample_bicubic2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> (Tensor) ;
aten::upsample_bicubic2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners) -> (Tensor) ;
aten::upsample_bilinear2d(Tensor self, int[2] output_size, bool align_corners, float? scales_h=None, float? scales_w=None) -> (Tensor) ;
aten::upsample_bilinear2d.out(Tensor self, int[2] output_size, bool align_corners, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::upsample_bilinear2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners) -> (Tensor) ;
aten::upsample_bilinear2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, bool align_corners, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::upsample_linear1d(Tensor self, int[1] output_size, bool align_corners) -> (Tensor) ;
aten::upsample_linear1d.out(Tensor self, int[1] output_size, bool align_corners, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::upsample_linear1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners) -> (Tensor) ;
aten::upsample_linear1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, bool align_corners, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::upsample_nearest1d(Tensor self, int[1] output_size) -> (Tensor) ;
aten::upsample_nearest1d.out(Tensor self, int[1] output_size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::upsample_nearest1d_backward(Tensor grad_output, int[1] output_size, int[3] input_size) -> (Tensor) ;
aten::upsample_nearest1d_backward.grad_input(Tensor grad_output, int[1] output_size, int[3] input_size, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::upsample_nearest2d(Tensor self, int[2] output_size) -> (Tensor) ;
aten::upsample_nearest2d.out(Tensor self, int[2] output_size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::upsample_nearest2d_backward(Tensor grad_output, int[2] output_size, int[4] input_size) -> (Tensor) ;
aten::upsample_nearest2d_backward.grad_input(Tensor grad_output, int[2] output_size, int[4] input_size, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::upsample_nearest3d(Tensor self, int[3] output_size) -> (Tensor) ;
aten::upsample_nearest3d.out(Tensor self, int[3] output_size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::upsample_nearest3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size) -> (Tensor) ;
aten::upsample_nearest3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::upsample_trilinear3d(Tensor self, int[3] output_size, bool align_corners) -> (Tensor) ;
aten::upsample_trilinear3d.out(Tensor self, int[3] output_size, bool align_corners, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::upsample_trilinear3d_backward(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners) -> (Tensor) ;
aten::upsample_trilinear3d_backward.grad_input(Tensor grad_output, int[3] output_size, int[5] input_size, bool align_corners, *, Tensor(a!) grad_input) -> (Tensor(a!)) ;
aten::values(Dict(Tensor, t) self) -> (t[](*)) ;
aten::values(Dict(float, t) self) -> (t[](*)) ;
aten::values(Dict(int, t) self) -> (t[](*)) ;
aten::values(Dict(str, t) self) -> (t[](*)) ;
aten::values(Tensor(a) self) -> (Tensor(a)) ;
aten::var(Tensor self, bool unbiased=True) -> (Tensor) ;
aten::var.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor) ;
aten::var.out(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::var_mean(Tensor self, bool unbiased=True) -> (Tensor, Tensor) ;
aten::var_mean.dim(Tensor self, int[1] dim, bool unbiased=True, bool keepdim=False) -> (Tensor, Tensor) ;
aten::view(Tensor(a) self, int[] size) -> (Tensor(a)) ;
aten::view_as(Tensor self, Tensor other) -> (Tensor) ;
aten::wait(Future(t) self) -> (t) ;
aten::warn(str message, *, int stacklevel=2) -> () ;
aten::where(Tensor condition) -> (Tensor[]) ;
aten::where.self(Tensor condition, Tensor self, Tensor other) -> (Tensor) ;
aten::zero_(Tensor(a!) self) -> (Tensor(a!)) ;
aten::zeros(int[] size, *, int? dtype=None, int? layout=None, Device? device=None, bool? pin_memory=None) -> (Tensor) ;
aten::zeros.out(int[] size, *, Tensor(a!) out) -> (Tensor(a!)) ;
aten::zeros_like(Tensor self) -> (Tensor) ;
aten::zeros_like.dtype(Tensor self, *, int dtype, int layout, Device device, bool pin_memory=False) -> (Tensor) ;
aten::zfill(str self, int width) -> (str) ;
onnx::Reshape(...) -> (...) ;
onnx::Shape(...) -> (...) ;
prim::AddStatValue(str key, int val) -> () ;
prim::AutogradAdd(...) -> (...) ;
prim::AutogradAnyNonZero(...) -> (...) ;
prim::AutogradZero() -> (Tensor) ;
prim::BailOut(...) -> (Tensor(a)) ;
prim::BailoutTemplate() -> (int) ;
prim::BroadcastSizes(...) -> (...) ;
prim::ChunkSizes(...) -> (...) ;
prim::Constant() -> (...) ;
prim::ConstantChunk(...) -> (...) ;
prim::CreateObject(...) -> (...) ;
prim::DictConstruct(...) -> (...) ;
prim::DifferentiableGraph(...) -> (...) ;
prim::Drop(...) -> (...) ;
prim::FusedConcat(...) -> (...) ;
prim::FusionGroup(...) -> (...) ;
prim::Guard(Tensor(a) t) -> (Tensor(a)) ;
prim::IgnoredPythonOp(...) -> (None) ;
prim::ImplicitTensorToNum(Tensor a) -> (Scalar) ;
prim::ListConstruct(...) -> (...) ;
prim::ListUnpack(...) -> (...) ;
prim::Load(...) -> (...) ;
prim::MMBatchSide(...) -> (...) ;
prim::MMTreeReduce(...) -> (...) ;
prim::NumToTensor(Scalar a) -> (Tensor) ;
prim::NumToTensor(bool a) -> (Tensor) ;
prim::Print(...) -> (...) ;
prim::PythonOp(...) -> (...) ;
prim::RaiseException(str msg) -> () ;
prim::Store(...) -> (...) ;
prim::StringIndex(str string, int index) -> (str) ;
prim::TimePoint() -> (int) ;
prim::TupleConstruct(...) -> (...) ;
prim::TupleIndex(...) -> (...) ;
prim::TupleSlice(...) -> (...) ;
prim::TupleUnpack(...) -> (...) ;
prim::Uninitialized(...) -> (...) ;
prim::abs(Scalar a) -> (Scalar) ;
prim::abs(Tensor x) -> (Tensor) ;
prim::abs(float a) -> (float) ;
prim::abs(int a) -> (int) ;
prim::data(Tensor(a) a) -> (Tensor(a)) ;
prim::device(Tensor a) -> (Device) ;
prim::dtype(Tensor a) -> (int) ;
prim::fork(...) -> (...) ;
prim::grad(Tensor a) -> (Tensor(*)) ;
prim::is_cuda(Tensor a) -> (bool) ;
prim::is_mkldnn(Tensor a) -> (bool) ;
prim::is_quantized(Tensor a) -> (bool) ;
prim::is_sparse(Tensor a) -> (bool) ;
prim::max(Scalar a, Scalar b) -> (Scalar) ;
prim::max(bool[] l, bool[] r) -> (bool[]) ;
prim::max(bool[] self) -> (bool) ;
prim::max(float a, float b) -> (float) ;
prim::max(float a, int b) -> (float) ;
prim::max(float[] l, float[] r) -> (float[]) ;
prim::max(float[] self) -> (float) ;
prim::max(int a, float b) -> (float) ;
prim::max(int a, int b) -> (int) ;
prim::max(int[] l, int[] r) -> (int[]) ;
prim::max(int[] self) -> (int) ;
prim::min(Scalar a, Scalar b) -> (Scalar) ;
prim::min(bool[] l, bool[] r) -> (bool[]) ;
prim::min(bool[] self) -> (bool) ;
prim::min(float a, float b) -> (float) ;
prim::min(float a, int b) -> (float) ;
prim::min(float[] l, float[] r) -> (float[]) ;
prim::min(float[] self) -> (float) ;
prim::min(int a, float b) -> (float) ;
prim::min(int a, int b) -> (int) ;
prim::min(int[] l, int[] r) -> (int[]) ;
prim::min(int[] self) -> (int) ;
prim::profile(...) -> (...) ;
prim::rangelist(int n) -> (int[]) ;
prim::requires_grad(Tensor a) -> (bool) ;
prim::shape(Tensor a) -> (int[]) ;
prim::unchecked_unwrap_optional(t(a)? optional) -> (t(a)) ;
quantized::add(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc) ;
quantized::add_out(Tensor qa, Tensor qb, Tensor out) -> (Tensor out) ;
quantized::add_relu(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc) ;
quantized::add_relu_out(Tensor qa, Tensor qb, Tensor out) -> (Tensor out) ;
quantized::add_scalar(Tensor qa, Scalar b) -> (Tensor qc) ;
quantized::add_scalar_out(Tensor qa, Scalar b, Tensor out) -> (Tensor out) ;
quantized::add_scalar_relu(Tensor qa, Scalar b) -> (Tensor qc) ;
quantized::add_scalar_relu_out(Tensor qa, Scalar b, Tensor out) -> (Tensor out) ;
quantized::cat(Tensor[] qx, int dim, float? scale, int? zero_point) -> (Tensor) ;
quantized::cat_out(Tensor[] qx, int dim, Tensor out) -> (Tensor) ;
quantized::cat_relu(Tensor[] qx, int dim, float? scale, int? zero_point) -> (Tensor) ;
quantized::cat_relu_out(Tensor[] qx, int dim, Tensor out) -> (Tensor) ;
quantized::conv2d(Tensor _0, Tensor _1, int[] _2, int[] _3, int[] _4, int _5, float _6, int _7) -> (Tensor _0) ;
quantized::conv2d_relu(Tensor _0, Tensor _1, int[] _2, int[] _3, int[] _4, int _5, float _6, int _7) -> (Tensor _0) ;
quantized::conv_prepack(Tensor _0, Tensor? _1, int[] _2, int[] _3, int[] _4, int _5) -> (Tensor _0) ;
quantized::conv_unpack(Tensor packed_weights) -> (Tensor unpacked_weights, Tensor? B_origin) ;
quantized::linear(Tensor X, Tensor W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y) ;
quantized::linear_dynamic(Tensor X, Tensor W_prepack) -> (Tensor Y) ;
quantized::linear_prepack(Tensor W, Tensor? B=None) -> (Tensor W_prepack) ;
quantized::linear_relu(Tensor X, Tensor W_prepack, float Y_scale_i, int Y_zero_point_i) -> (Tensor Y) ;
quantized::linear_relu_dynamic(Tensor X, Tensor W_prepack) -> (Tensor Y) ;
quantized::linear_unpack(Tensor W_prepack) -> (Tensor W_origin, Tensor? B_origin) ;
quantized::max_pool2d(Tensor qx, int[] kernel_size, int[] stride, int[] padding, int[] dilation, bool ceil_mode) -> (Tensor) ;
quantized::mul(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc) ;
quantized::mul_out(Tensor qa, Tensor qb, Tensor out) -> (Tensor out) ;
quantized::mul_relu(Tensor qa, Tensor qb, float scale, int zero_point) -> (Tensor qc) ;
quantized::mul_relu_out(Tensor qa, Tensor qb, Tensor out) -> (Tensor out) ;
quantized::mul_scalar(Tensor qa, Scalar b) -> (Tensor qc) ;
quantized::mul_scalar_out(Tensor qa, Scalar b, Tensor out) -> (Tensor out) ;
quantized::mul_scalar_relu(Tensor qa, Scalar b) -> (Tensor qc) ;
quantized::mul_scalar_relu_out(Tensor qa, Scalar b, Tensor out) -> (Tensor out) ;
quantized::relu6(Tensor qx) -> (Tensor) ;
#Total 1 manual add FunctionSchema
prim::GetAttr() -> (Tensor) ;
prim::If(bool) -> (...) ;
